{"data":[{"title":"Linux 下面常见的代理设置","url":"/posts/Proxy-Settings/","content":"通常情况下在 Linux 下面配置好的是 socks5 代理（你懂的），但是这个代理并不能让所有程序自动走它，需要手动的做一些转换。\n\n\nproxychains\nproxychains 通过 hook libc 里面网络访问的函数实现劫持流量经过代理，配置时首先编辑 /etc/proxychains.conf 添加一行有关自己的代理的配置比如\n1socks5 [IP 地址] [端口号]\n然后就可以将你需要走代理的程序跟在 proxychains 后面比如\n1$ proxychains wget google.com\n环境变量\n有些奇葩的语言设计时完全静态链接，不会调用 libc 的运行时库（说的就是那个叫 go 的），因此没办法使用 proxychains 进行 hook。但对于命令行程序，通常有个约定，如果用户设置了 http_proxy 和 https_proxy，程序就会使用这个作为代理。可以在这两个里设置 socks5 代理，比如 export http_proxy=socks5://127.0.0.1:1080，但问题不是所有程序都支持 socks5 代理，所以需要一些方案将 socks5 转换成 http 代理。当然如果你遇到一个 go 程序不读取这两个变量怎么办？当然是在心里问候一下开发者先人。\nprivoxy\n我个人比较习惯使用 privoxy 做代理转换，当然能实现这个功能的程序非常多，privoxy 是其中一个，安装好之后修改配置文件，添加一行\n1forward-socks5   /               [IP 地址]:[端口号] .\n然后使用 systemctl start privoxy 启动即可。\n桌面环境\n诸如 GNOME 和 KDE Plasma 等都在网络设置里提供了代理选项，按表格填写即可，对于一些内建代理支持的也可以同理比如 Telegram Desktop，本地的 socks5 代理是不需要填写用户名和密码的。对于另外一些同学想要使用 Automatic 的选项的，你需要生成一个 pac 文件，这个文件里记录了哪些网站需要走代理，可以搜索 你用的 socks5 代理协议的名字 + pac 得到更多相关内容，然后在这个选项里填写以 file:// 开头的 URL，支持的程序就会使用这个 pac。\n浏览器\n通常大家使用插件来调用代理，但如果你上一步设置了桌面环境的代理比如 pac，可以直接走系统代理。\n端口转发\n有时候你的网络很奇葩，连接所有代理服务器都很慢，可以通过一个国内服务器做端口转发，需要在国内服务器执行下列命令。\n开启流量转发\n12# echo \"net.ipv4.ip_forward=1\" &gt;&gt; /etc/sysctl.conf\n# sysctl -p\n配置转发规则\n1234# iptables -t nat -A PREROUTING -p tcp --dport [端口号] -j DNAT --to-destination [代理服务器地址]\n# iptables -t nat -A PREROUTING -p udp --dport [端口号] -j DNAT --to-destination [代理服务器地址]\n# iptables -t nat -A POSTROUTING -p tcp -d [代理服务器地址] --dport [端口号] -j SNAT --to-source [国内服务器地址]\n# iptables -t nat -A POSTROUTING -p tcp -d [代理服务器地址] --dport [端口号] -j SNAT --to-source [国内服务器地址]\n然后修改你本地的 socks5 配置，IP 改为国内的服务器的 IP。如果国内服务器默认有防火墙（安全组），添加规则放行该端口（TCP + UDP）。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"WireGuard 配置与使用","url":"/posts/WireGuard-Usage/","content":"可能有人在 Google 搜索 “WireGuard 原理” 然后发现精选摘要是这篇博文，这给我带来了很多流量。但我还是要摸着良心说这篇博文并没有涉及到什么深层次具体的 WireGuard 原理，只是简单的配置使用记录。我不知道为什么 Google 会依据文章里唯一的一个“原理”就认为这篇文章是讲述 WireGuard 原理的，我不想误人子弟，所以已经删掉了唯一的一处关键词。如果你点进来发现走错了，这不是我的责任，建议反馈给 Google 打他们的脸。我个人建议直接访问 WireGuard 的官网或者 Wikipedia 页面来查找有关它的原理的资料。\n\n由于时间久远，记录的事物可能已经改变，作者不能保证此时页面内容完全正确，请不要完全参考。\n\n需求\n本来想给内网的树莓派做 frp 一类的公网映射以便能够在外面访问 Samba 服务器，但是后来想想似乎把设备暴露在公网不太安全。换个角度想，其实没有必要把树莓派映射出去，只要能够连接进来就好了。所以选用 VPN 建虚拟专用网就好了，这里使用的 WireGuard 将我的各个设备连到一个子网内部。\n\n\nWireGuard 和大部分 VPN 类似，是使用一个公网服务器做 Endpoint，内网的数据通过该服务器进行转发，因此子网的各个设备可以没有固定的 IP，只要都能连接公网服务器就好了。\n安装\n由于不同的系统安装方法不一样，建议参照 WireGuard 官网的安装说明 和各个系统的 Wiki，Android 手机可以搜索下载 WireGuard 的 APK 进行安装。\n配置\n以下部分内容参考自 WireGuard - ArchWiki。\n\n首先需要生成公钥和私钥，建议将其设置为只有拥有者才能操作，我这里放在 /etc/wireguard 这个目录里面，这个目录应该是只有 root 才可以访问的。服务器和客户端都需要分别进行这一步。\n12# cd /etc/wireguard\n# wg genkey | tee privatekey | wg pubkey &gt; publickey\n服务端\n然后需要手写配置文件，这一步对于服务端和客户端不一样，先进行服务端的配置。\n首先在 /etc/wireguard 目录下面建立 wg0.conf（如果你已经有一个了就 wg1，依此类推），服务端的配置文件内容看起来像这个样子：\n12345678910111213141516171819[Interface]\nAddress = 10.0.0.1\nListenPort = 7456\nPrivateKey = [服务器的私钥]\nPostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nDNS = 8.8.8.8\n\n[peer]\nPublicKey = [客户端 1 的公钥]\nAllowedIPs = 10.0.0.2/32\n\n[peer]\nPublicKey = [客户端 2 的公钥]\nAllowedIPs = 10.0.0.3/32\n\n[peer]\nPublicKey = [客户端 3 的公钥]\nAllowedIPs = 10.0.0.4/32\n然后我们依次分析每个字段的内容，首先是 Interface，这个部分指的是 WireGuard 在本机上面的接口，它是以内核模块的形式工作的，Address 指本机在子网内的私有 IP 地址，我这里分配了保留段 10.0.0.0/24 作为子网网段（看不懂的自己去复习计网），你也可以用 10.0.0.0/8 这个网段再进行划分，这个主机地址是你自己随意分配的，只要不冲突就行。ListenPort 是监听的服务器 UDP 端口，这个也是自己设置，只要不冲突就行。PrivateKey 则是刚刚 服务端 生成的 privatekey 这个文件的内容。PostUp 和 PostDown 是配置 iptables 的命令，建议直接复制即可，如果你服务器的公网网卡不是 eth0 则需要自己修改。DNS 则是解析域名用的 DNS，这里直接使用 8.8.8.8。\n然后每一个 Peer 字段对应了一个客户端（或其他服务端，WireGuard 实际上是 P2P 的），需要分别将该客户端的 publickey 文件的内容贴到 PublicKey，以及需要转发到该客户端的流量的 IP 地址范围贴到 AllowedIPs，我这里直接给每个客户端设置固定的 IP，因此就写了 10.0.0.2/32（看不懂的自己去复习计网），意思是该客户端对应的 IP 就是这个，所有向这个 IP 发送的流量都会被转发到这个客户端。\n每添加一个新的客户端，就要在这个文件里添加一个 Peer 字段，然后设置 PublicKey 和 AllowedIPs。\n然后在服务器的 /etc/sysctl.conf 最后加上一句 net.ipv4.ip_forward=1，开启 IPv4 流量转发，然后运行下面的命令加载新设置：\n1# sysctl -p\n客户端\n客户端也需要在 /etc/wireguard 目录下面建立 wg0.conf（如果你已经有一个了就 wg1，依此类推），内容看起来是这样：\n123456789[Interface]\nAddress = 10.0.0.4\nPrivateKey = [客户端的私钥]\n\n[Peer]\nPublicKey = [服务端 1 的公钥]\nAllowedIPs = 10.0.0.0/24\nEndpoint = [服务端 1 的公网 IP]:[服务端 1 的端口]\nPersistentKeepalive = 25\nInterface 字段自然是客户端本机的设置，Address 还是给本机分配的 IP，这里要和服务器在同一个子网，并且要和服务器配置文件里允许的 IP 段对上。PrivateKey 则是刚刚 客户端 生成的 privatekey 这个文件的内容。\n然后通过添加 Peer 字段来添加服务端，服务端作为这个网络的出口和转发点，首先需要填写对应的 服务端 的公钥，然后这里的 AllowedIPs 设置的是 该客户端有哪些 IP 段的流量要通过该服务端进行转发，由于我只希望内网的流量进行转发，自然设置的是内网的 IP 段 10.0.0.0/24（看不懂的你计网挂科了！），然后需要设置 Endpoint 以便能正确的在公网上找到服务器（虚拟专用网，连不上网还哪来的虚拟网啊？），格式就是 服务器公网 IP:你设置的监听端口。PersistentKeepalive 则是用来保持连接的参数，直接复制即可。\n如果你有多个服务器，就在这里添加多个 Peer，分别设置不同的 AllowedIPs 让他们转发，但 不需要让客户端之间互相添加 Peer，本来我们要解决的问题就是客户端之间不能互相连接，所有的流量是经由公网的服务端进行转发才可以到达，公网的服务器是各个不固定的客户端的接头地点。所以只需要保证服务端和所有的客户端认识就可以了。\n启动\n在分别配置好客户端和服务端之后就可以启动了，这一步两边都一样。注意把 wg0 换成你配置文件的名字。\n1# wg-quick up wg0\n然后使用 wg 命令可以查看状态，由于这些涉及到网络配置，都需要 root 权限。服务端和客户端输出的结果是不一样的，下面这个是我的笔记本输出的结果。\n123456789101112# wg\ninterface: wg0\n  public key: [不给你看]\n  private key: (hidden)\n  listening port: 51676\n\npeer: [不给你看]\n  endpoint: [不给你看]\n  allowed ips: 10.0.0.0/24\n  latest handshake: 1 minute, 41 seconds ago\n  transfer: 38.36 KiB received, 141.71 KiB sent\n  persistent keepalive: every 25 seconds\n建立成功的话，子网之间是可以使用内网地址互相 ping 的：\n1234567891011$ ping 10.0.0.11\nPING 10.0.0.11 (10.0.0.11) 56(84) bytes of data.\n64 bytes from 10.0.0.11: icmp_seq=1 ttl=64 time=30.1 ms\n64 bytes from 10.0.0.11: icmp_seq=2 ttl=64 time=30.4 ms\n64 bytes from 10.0.0.11: icmp_seq=3 ttl=64 time=30.5 ms\n64 bytes from 10.0.0.11: icmp_seq=4 ttl=64 time=30.4 ms\n64 bytes from 10.0.0.11: icmp_seq=5 ttl=64 time=30.5 ms\n^C\n--- 10.0.0.11 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 11ms\nrtt min/avg/max/mdev = 30.133/30.393/30.521/0.209 ms\n如果你确定没有问题，就可以使用 Systemd 管理连接，首先关闭刚才的连接：\n1# wg-quick down wg0\n然后启动现成的 Unit：\n1# systemctl enable wg-quick@wg0 --now\n后记\n如果你需要在内网之间传递数据，建议选择一个访问较快的服务器，因为数据转发要通过这个服务器。\n但如果你想使用 WireGuard 访问一些被河蟹的内容也可以，首先需要一个在海外的服务器，然后设置客户端该服务器的 AllowedIPs 为 0.0.0.0/0（意思就是所有 IP 都经过这个服务器转发啦！或者你知道该设置某些网段也行！或者避开内网和本地地址！我不建议用这个番茄！所以就写个最蠢的！），就可以了！记得不用时候关掉，不然一些国内 App 也会走海外的！\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"使用 Moment 处理 JavaScript 与 YAML 的时区转换","url":"/posts/JavaScript-YAML-Timezone-Moment/","content":"开始之前先来一段惊喜：我是在中国标准时间 21 点写的这篇文章，但我在 front matter 写的是 21:00:00 并解析为东京时间。\n\n\n今天想给 Hikaru 添加文章时间显示时区的功能，本来以为只要无脑调用 Moment.js 就好了，但发现其中坑有很多，本来我就很不擅长计算时区转换，难度变得很大，好在后来处理完了，记录一下遇到的坑。\n首先 Moment 是不支持地区解析和时区显示的，需要安装 moment-timezone 这个扩展包才可以处理，文档在这里。\n然后就是 js-yaml 开发者认为是标准但我觉得是 Bug 的问题。我在 front matter 里写的时间是不包含时区的，比如 2018-12-31 16:00:00，按照正常的解析方式（就是直接 new Date(\"2018-12-31 16:00:00\")），应当把这个时间当作 localtime 来看待，也就是 UTC+8h 的时间，但偏偏 js-yaml 的开发者认为按照 YAML 标准应当把这个时间当作 UTC 来处理（问题是他 根本解析不了附加时区的表示方式啊！）然后时间就错乱了，不过还好，JS Date() 对象内置的 getTimezoneOffset() 方法可以获取到 UTC 与 localtime 的分钟差（和标注的 UTC+8h 正好相反，这个是 -8h，在这里正好把这个错误的 UTC 换算回正确的 UTC）。具体的代码如下。\n12345const yaml = require(\"js-yaml\")\nconst d = yaml.safeLoad(\"2018-12-31 16:00:00\")  // -&gt; 2018-12-31T16:00:00.000Z\nnew Date(\"2018-12-31 16:00:00\") // -&gt; 2018-12-31T08:00:00.000Z\nd.getTimezoneOffset() // -&gt; -480\nnew Date(d.getTime() + d.getTimezoneOffset() * 60 * 1000) // -&gt; 2018-12-31T08:00:00.000Z\n接下来遇到另一个问题，Nunjucks 似乎对传递参数有很大限制，比如 moment 既是函数也有成员，我没办法在 Nunjucks 里面调用它的 moment.tz.guess() 成员，所以只能把设置地区单独做成文章参数传进去。\n然后发现这样有一个问题，比如我在日本写文章的时间是 21 点，回到中国发布，它解析时会当成东 8 区的 21 点来解析，然后使用 moment(\"2019-01-01 21:00\").tz(\"Asia/Tokyo\").format() 时进行转换，将东 8 区（中国）的 21 点转换成东 9 区（日本）的 22 点。然而实际上我觉得更常见的是一个人在国外写了一篇文章，自然标注的是国外时间（谁叫 js-yaml 不支持时区记号呢！），然后用另一个参数注明自己现在的地区，这样回到自己的国家之后，发布时仍然以外国时区解析时间。\n很显然解决方案是要改变解析时间的时区，但似乎 JavaScript 并没有什么好的修改时区的办法，使用 moment.tz(时间，地区) 似乎可以限定解析的时区，但是直接像下面这样做完全没用。\n123456const yaml = require(\"js-yaml\")\nconst moment = require(\"moment-timezone\")\nconst d = yaml.safeLoad(\"2019-01-01 21:00:00\")  // -&gt; 2019-01-01T21:00:00.000Z\nconst newd = new Date(d.getTime() + d.getTimezoneOffset() * 60 * 1000) // -&gt; 2019-01-01T13:00:00.000Z\nmoment.tz(newd, \"Asia/Tokyo\").toISOString() // -&gt; 2019-01-01T13:00:00.000Z\nmoment.tz(newd, \"Asia/Tokyo\").format(\"YYYY-MM-DD HH:mm:ss z\")  // -&gt; 2019-01-01 22:00:00 JST\n它仍然是将 21 点当作东 8 区转换为东 9 区的 22 点了，时区完全没变，不然应该是有一小时的变化（从东 8 到 东 9），原因是如果一个时间已经标注了时区（各种合法的格式，比如 JST、CST、+0800 等，单独的 Z 在 ISO 标准里就表示 UTC，因此也算标定），Moment 就不会用程序员给定的地区做解析，而是用作输出时的转换（等价于 moment(时间).tz(地区)）（这么设计 API 的人你出来我保证不打死你）（我觉得我应该去看一眼那个叫 You-Dont-Need-Momentjs）的项目。\n解决方案似乎没什么特别优雅的，既然你不肯去掉，那我自己造一个没时区的字符串然后再解析一次呗。\n123456const yaml = require(\"js-yaml\")\nconst moment = require(\"moment-timezone\")\nconst d = yaml.safeLoad(\"2019-01-01 21:00:00\")  // -&gt; 2019-01-01T21:00:00.000Z\nconst newd = new Date(d.getTime() + d.getTimezoneOffset() * 60 * 1000) // -&gt; 2019-01-01T13:00:00.000Z\nmoment.tz(moment(newd).format(\"YYYY-MM-DD HH:mm:ss\"), \"Asia/Tokyo\").toISOString() // -&gt; 2019-01-01T12:00:00.000Z\nmoment.tz(moment(newd).format(\"YYYY-MM-DD HH:mm:ss\"), \"Asia/Tokyo\").format(\"YYYY-MM-DD HH:mm:ss z\") // -&gt; 2019-01-01 21:00:00 JST\n这样结果就对了。至于接下来你想用什么地区的时间输出无所谓，反正内部的时间已经改变了，不再是你本机的时间。\n新年新 Bug：当我在研究为什么我的生成器没有在首页生成这篇新文章半小时之后，我发现问题的源头是我把 2019-01-01 写成了 2018-01-01。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"StackHarbor 的 2018 尾记","url":"/posts/2018-Tail/","content":"\n还没有到月亮升起的时候呢。\n\n\n不是所有特殊的日子都能让人开心，特别是对于一个记性不太好的人来说。虽然距离上一个这样标题的已经过了一年，但我似乎想不起来这一年有什么值得开心的事情。我是指那种能维持很久的开心，但是很遗憾似乎让人难过的事情总是能持续的更久一点。\n今年大概保证了一个月一篇 post 的频率，虽然有些月份就懒的什么也不想干，但回头翻一翻之前还有存货，让人变懒的原因不是无事可做，往往是由于各种没什么意义还不得不做的事情，一旦沉迷在这些事情里太久，就容易让人忘记自己应该做什么事情。\n似乎这一年来就一直不清楚自己该做什么，虽然对于自己不想做什么有清晰的了解，但是说到做什么，似乎每一件事都不是很容易完成，特别是一些没接触过的东西。而且糟糕的是我觉得这个状态还会继续存在下去——我还没搞到该死的创新创业学分！\n说句实在话，我不想当韭菜，也没当韭菜的成本。我还有好多事情没有完成呢！大概对于一棵韭菜来说，长得和其他韭菜不一样就是错误。\n所以说实话，最近没有什么值得开心的事情，更远一些也没有。\n如果从最早开始说的话，今年大概从 空之境界 开始，然后是 Fate/Stay Night，然后是 Fate/Zero。第一遍看空之境界的时候还不知道整个在说什么，只是模糊地觉得十分喜欢，最近又拿起来重新看了一遍，才发现一些不一样的意思。\n话说回来，虽然是第一次看，但是却有十分熟悉的感觉，大概是因为里面一些插曲早就不知道循环了多少个深夜的原因。总有一些旋律是停留在记忆里面的，理解它们从来就没有什么困难。\n然后是 Fate，最开始只是因为把 卫宫家今天的饭 当成泡面番来看的，没想到一下子就点开了一年霸权（真·年番）。当然看过 Stay Night 之后和没看之前看这部的感觉是不一样的——一同经历过很多，怎么能不留下些痕迹呢——大概和所有人一样，只要看到他们还在一起就满足了。\n然后大概 Unlimited Blade Works 线的动画从音乐上整个就输给了 Fate 线动画，除了 LAST STARDUST 是确确实实的超水平，believe 和 ring your bell 表现实际很一般（这里一般的意思就是指没什么第一遍就吸引人的地方）。Fate/Zero 也是完完全全的超出 Unlimited Blade Works 的音乐（只要把满天拉出来就可以吊打了），至于 2019 年 1 月 11 日的 Heaven's Feel……我并不是樱厨，所以大概这条线不适合我吧。还有 幻想嘉年华 大概和卫宫家今天的饭是同一水平的作品，太严肃了也是很累的。至于 Fate/Apocrypha？这不是讲的莫德雷德和狮子劫界离的故事嘛？写的挺好的！就是 23 集就完结有点奇怪……后面还做两集多余的骗收视率嘛？（摸着良心说，阿福这个配角也挺可爱的。）\nFate 系列其他的作品就没看过了，我觉得也没有看的必要，FGO 从看完 Stay Night 开始玩，到现在也差不多没什么动力了（主要是懒），反正一年过去了，我还是没有抽到蓝呆毛。（93 连抽！279 个石头！一个五星都没有！）虽然金卡有了一大堆一般的本也都轻轻松松，但是我还是很想要蓝呆。（无独有偶，信用卡我也只拿到武藏的，没有蓝呆。）明年有第六七章的动画化，第七章我只是觉得故事性很好，但第六章的动画是我最期待的。\n导致不开心的大概是在我重新开始听 Kalafina 的时候听见了 Keiko 退出的消息，完全不愿意回想这件事发生的前后过程。无论希望还是失望也都已经过去了，那剩下的复杂的感情又是什么呢？与其空怀希望，不如让时间回到一切还没发生的时候，重来一遍的话，我应该不会错过那些不该错过的机会了吧。与已经得不到的相比，每天都在重复的无聊事情有什么意义吗？\n顺便一提，假期之前通关了 NieR: Automata，但现在的我恐怕没有再来一次的勇气。\n也许我可以有更多的事情可以做，但是实际上我只有两个作品，一个是现在正在用的主题 ARIA，某种程度上它和我的想法一样简单，本来就是非常简单的逻辑嘛。这个东西写的非常直白，样式也全部是我自己完成的，不会出现什么奇怪的乱七八糟的调用。也没有对一些历史垃圾进行没必要的适配，直接采用最合适的技术，去掉那些对内容没什么帮助还消耗资源的东西就好了。\n还有一个是 Hikaru，基于和上面类似的原因，我对 Hexo 也有一定的不满，虽然看起来其它的让我更没什么兴趣。于是大致按照逻辑设计了自己的生成器，并且给它起了我最喜欢的歌手的名字。这个程序也是一样的直白，反正只是生成一遍页面而已，没有必要搞什么乱七八糟的数据库嘛，就算有必要也可以直接上 SQLite（当然我没有，而是直接用对象引用了）。包括一些乱七八糟的模板里的工具，总之是把所有不符合自己习惯的地方都改了一遍。截至目前一切工作的都很良好，甚至一些我开始不知道怎么实现的地方也都工作了。我也并不觉得需要有多少多少人来用它，只要满足我自己用就行了，至于别人，随意。\n然后大概就是换手机，一加 3T 使用了两年已经是伤痕累累，但是看起来又没什么符合要求的手机，一加的后几代产品完全就是“不讲究”，MIX2S 看起来不错但没有耳机孔也没有防水，而且我并不是很喜欢 MIUI，Pixel 3 的性价比完全就是冲着“有种别买”去的，何况这个价格一旦出了问题没保修就要了命了。反正我都是晚上充电，充的太快反而让我不放心，快充完全没什么需求，所以最后考虑加钱买 Galaxy S9（因为 128G 的 S9+ 实在是超出预算了），但是看到 S9+ 有 64G 的版本（反正可以插存储卡），同时 4G 内存实在是太小，咬咬牙就 S9+ 了，反正有奖学金和上个月的结余。别问我 6k+ 为什么不买 iPhone，我考虑了一下，这东西我拿来完全不能用（没文件管理 怎么愉快的用 Samba 在 Arch 和手机之间交换文件，以及 Shadowsocks 处理起来也很麻烦，我也不可能因为一个 iPhone 迁移我整个生态和习惯，顺便还 没有耳机孔，以及 被限制的 NFC，也 不能随便外接 U 盘……），所以还不如当它不存在，不存在的东西就不考虑了，这样一来 Galaxy S9+ 就变成了第一档配置的选项。\n拿到 S9+ 以后才发现多出来的价格完全没有白花。对我来说这个手机唯一的缺点就是这个曲屏太难贴膜以及担心摔碎（所以想办法搞了碎屏险）。至于其它的完全 OK，防水是一个平时我不会故意去用（我不洗手机！）但总能让人很安心的功能，双摄也是到手了之后发现 2X 变焦在拍猫的时候很有用（不用担心追的太近猫猫跑掉了），指纹识别在后面总比没有要强（毕竟我很讨厌实体按压 Home 键），有 NFC，屏幕水平中规中矩（手机居然可以切换分辨率你敢信！平时用 1080P 就很清晰了。），可以插存储卡，耳机孔绝对是加分项目，特别是 随包装送了 AKG 耳机、USB-C 到 MicroUSB 的转接头，USB-C 到 USB-A 的转接头（本来是换机助手用的，但完全可以用来接 U 盘）、透明手机壳甚至还有无线充电器（聊胜于无，对我来说只是多了一个充电的位置，角度什么的并不十分合适），甚至似乎还可以一边接收 WiFi 一边开热点（！！！）。另外软件上也和当初的 TouchWiz 有天壤之别，整个系统的动画很复杂，可配置项多到根本翻不完（对我来说这是优点），比如我喜欢返回键在左侧（OK），还可以设置桌面下拉通知栏，不但可以设置是否显示二级菜单（二级菜单爱好者手动吐槽一众国产和 iPhone），甚至可以设置是手势开启二级菜单还是单独图标（可惜图标不能换位置，不过反正我用手势），桌面可以横屏……以及 Android P 的更新……顺便还有能解决毒瘤但是又不过分突出的智能管理器（真的好用，不是假的，实名推荐），连我这种原生党也非常满意。甚至在 Note 9 上用任意线缆就能开启 DeX 的特性也在 Android P 通过软件更新就实现了（在 S9 上 不是硬件限制！三星也 没有强行要求你买他自家底座 的意思！亲测完全没有阉割。），手动 @ 某没良心配件厂一下。\n最后一个月稍微有点安慰的就是又看了一部 9.8 分的番（上一个 9.8 的是卫宫家今天的饭），青春猪头少年不会梦到兔女郎学姐，真正的高情商男主和真正的高情商女主以及不狗血的爱情故事让人实名羡慕啊，顺便樱岛麻衣真可爱！回头再看看某些废物后宫男，整个的质量已经是在恶心人了，要不是为了明年的电磁炮，谁会花钱看这种东西啊喂！都不是小学生了，天天比这个强比那个强算战斗力有意思吗？\n总而言之，幸福的事情都是相似的，不幸的事情则各有各的不幸，某种程度上来说，幸福的事情并不在于事情本身，而是在等待这件事情到来的过程中，就像一个慢慢升起的气球，当它上升到看不见的时候，反而会有难以掩盖的失落感。反正天下没有不散的宴席，幸福的事情也总会结束，也许是如此人们才会给自己一个又一个理由让平凡的日子变的不平凡，好有下一个盼头支撑自己活下去。但是回过头来看，这些事情又留下了什么呢？\n已经是月亮升起的时候了，何等愚蠢而幸福的人啊！\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"C 语言学习 1","url":"/posts/Learning-C-1/","content":"这个是给 2018 级 C 语言辅导准备的文档，写来写去写了好多，索性在网站也发一份。有很多是我觉得老师不会讲，但一开始很难理解，不理解又听不懂的，有学 C 的可以看一看。\n\n\n基础中的基础\n计算机只能识别机器码，机器码对程序员不友好，肯·汤普森和丹尼斯·里奇为了能更容易编写 UNIX，设计和实现了 C 语言。\n从代码到程序\nC 语言本质上是纯文本（就是所谓的 txt 文本文件），使用扩展名 .c 和 .h 主要是为了能够让人从名字上识别这是 C 源码或头文件，你可以使用任何能够编辑文本的程序编辑 C 语言。\n编写 C 程序主要有下面几个步骤：\n\n用任何你喜欢的文本 编辑器 编写代码（记事本也行，但很难用）。\n调用 编译器 将程序员能看懂的代码翻译成机器码组成的程序。\n运行程序，得到结果。\n\n名词解释\n\n编辑器：用来编写代码，可以是任何能编写纯文本文件的程序（Word 这类程序生成的并不是纯文本）。\n编译器：用来翻译代码到机器码，属于比较复杂的程序，通用的有微软的 MSVC，GNU 的 GCC 或者 LLVM 配套的 clang。\n集成开发环境（IDE）：一种集合了文本编辑和编译代码功能的程序，通常还会集合一些附加的功能比如调试等。其中编译代码的功能通常是调用上面提到的那几种编译器进行。\n\n注意：IDE 并不是编写代码的必需品，只要能编写文本又能调用编译器就可以写程序，因此不要问诸如“要用 VS 写 C 语言，那 VS 是用什么写的？写 VS 的公司是神吗？”这种 弱智 问题。没有 C 或者 C++ 很可能就不会有 VS，但是没有 VS 依然可以写程序。\n注意：不建议使用 VC++ 6.0 编写 C 程序，这个程序的年龄比在座各位都大，当时 C 语言还没有完整的标准，和我们现在的 C 相差很多。并且实际上这是个 C++ 的 IDE，而 C 和 C++ 并不完全一样，应该视为两种语言。\n可以使用 VS 或者 Code::Blocks 编写 C 程序，苹果 macOS 用户可以使用 Xcode，这些程序对于最新的 C 标准有着非常好的支持。\n注意：对于 VS 用户需要注意默认 VS 会要求你使用它私有的一些函数而不是标准的 C 函数，这个需要在代码开始添加一行 #define _CRT_SECURE_NO_WARNINGS 来关闭。对于 Code::Blocks 用户请下载集成了编译器的安装包（简而言之，体积最大的），否则你下载下来以后会发现自己并没有编译器，没法编译代码。\n学习 C 语言的正确方法\n多写，多练，光动脑不动手什么语言都学不会，可以从模仿别人的代码开始：\n\n首先对照别人的代码，自己完整的输入一遍程序，这里不是要你复制粘贴，当你能正确的输入程序的时候，说明你已经记住了 C 的结构，不会漏掉分号或者括号等。\n然后阅读代码，并推测这段程序会得到什么结果。然后运行代码\n如果和你预测的结果不一样，研究为什么不一样。\n修改代码中的某一部分，然后重新进行 2 3 4 步，直到你已经完全掌握了这个程序的功能。\n接下来你可以尝试自己从头写一份代码解决问题了。\n\n语法基础\n对于计算机最基础的功能自然是做计算，所以 C 语言需要有 数字 和 符号（必须是英文符号）两种组成成分。\n数字\n没什么好说的，你可以直接写十进制的数字，但是如果你想写十六进制的数字，只要以 0x 或 0X 开头就行，比如 0x1F 就是 31，八进制则是以 0 开头，比如 076 就是 62。\n运算符\n最基础的运算符自然是加减乘除，即 +、-、*、/。（除号这个方向叫斜杠，\\ 这个叫反斜杠。）\n求余数又叫做取模，符号是 %，比如 5 % 2 结果是 1。\n还有位运算 按位与 &amp;，按位或 |，按位异或 ^，左移 &lt;&lt;，右移 &gt;&gt;，它们处理的是内存中的二进制。\n然后是赋值运算符 =，这个符号 将右边的值赋给左边，因此左边必须是变量，右边必须是有值的表达式（表达式的概念往后看），比如 2 = 1 + 1; 很显然不行，2 不是变量，这里也不是比较相等。\n还有一些整合的运算符，比如 +=、-=、*=、/=，x += 1 就等价于 x = x + 1。取模和位运算也可以这样和赋值结合起来。\n然后是一些用来比较关系的符号，比如 大于 &gt;，小于 &lt;，等于 ==（判断相等用两个等号），不等于 !=，大于等于 &gt;=，小于等于 &lt;=。还有逻辑运算符号 与 &amp;&amp;（同真则真），或 ||（同假则假），非 !（反转）。\n在说明之前，需要先了解在 C 语言里什么是真，什么是假，简单来说，0 和所有等于 0 的值都是假，其他所有值都是真。对于关系运算，真返回 1，假返回 0。\n需要注意比如数学上的 1 &lt; x &lt; 2，在 C 语言中是不成立的，因为按照 C 的处理顺序，会先处理 1 &lt; x，这个式子只可能是 0 或者 1，最后就变成 1 &lt; 2 或者 0 &lt; 2，永远是真的了。正确写法是 x &gt; 1 &amp;&amp; x &lt; 2，使用逻辑运算。\na != b 就等价于 !(a == b)。\n, 逗号运算符表示按顺序进行用逗号分隔的子表达式。\n() 小括号就如同数学中的括号一般改变运算顺序。\n[] 中括号用于取数组元素，比如取 数组 arr 的第五个元素（如果有）就是 arr[5]。\n&amp; 用于获取一个变量在内存中的地址，而 * 用于通过地址获取该位置的值。\n. 用于通过结构体变量名字访问结构体内容，比如对于 struct point 变量 point 取 point.position_x。而 * 用于通过结构体指针取结构体内容，比如有指向 struct point 变量 point 的指针 ptr，可以 ptr-&gt;position_x。\n++ 和 -- 分别是让变量自增 1 和自减 1。\nsizeof 这个运算符会给出后面变量的类型或类型本身的字节数，比如 sizeof char 或者 sizeof(char) 值为 1。\n?: 是唯一一个三元运算符，使用类似于 条件 ? 表达式1 : 表达式2，如果条件为真，运行表达式1，否则运行表达式2。\n运算符有非常复杂的优先级顺序，在这里列出表格，建议经常查阅，如果你在写程序的时候遇到不确定的地方，给你想先算的式子加上小括号总没错。\n\n\n\n类别\n运算符\n结合顺序\n\n\n\n后缀\n() [] -&gt; . ++ --\n从左到右\n\n\n一元\n+ - ! ~ ++ -- (type) * &amp; sizeof\n从右到左\n\n\n乘除\n* / %\n从左到右\n\n\n加减\n+ -\n从左到右\n\n\n移位\n&lt;&lt; &gt;&gt;\n从左到右\n\n\n关系\n&lt; &lt;= &gt; &gt;=\n从左到右\n\n\n相等\n== !=\n从左到右\n\n\n位与\n&amp;\n从左到右\n\n\n位异或\n^\n从左到右\n\n\n位或\n|\n从左到右\n\n\n逻辑与\n&amp;&amp;\n从左到右\n\n\n逻辑或\n`\n\n\n\n条件\n?:\n从右到左\n\n\n赋值\n= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^= |=\n从右到左\n\n\n逗号\n,\n从左到右\n\n\n注意：C 并没有用于计算类似于 xy 这种乘方的运算符，而是需要调用函数计算，这里没有 **，^ 也不是用来算这个的。\n标识符\n除数字和符号之外，我们还需要更多的词语来给 C 中的东西起名字，这些词语被称为标识符，合法（说人话就是有效）的标识符需要满足以下两条要求：\n\n组成成分是 字母 A-Za-z（区分大小写），数字 0-9，下划线 _（下划线不是连字符 -，因为这个是加减乘除的减）。\n第一个字符必须是字母或者下划线，不能是数字（如果以数字开头，判断这个词到底是数字还是标识符就会变得很麻烦，所以不支持）。\n\n比如 if，areYouOK，Areyouok，Dota2_357 甚至是 _（单个下划线）都是合法且 不同 的标识符。\n注意：尽量不要在程序里使用中文，如果你实在不知道某个词怎么翻译成英语，用拼音也可以勉强接受。千万不要在程序里使用中文标点符号，它们和英文的标点符号是不同的字符，编译器不认识它们。如果你经常分不清中文和英文标点符号，考虑更换你编辑器的字体。\n在大部分情况下，代码中连续的空白符（制表符 tab，换行符 newline 和空格 space）会被当作一个空白处理，因此写几个空格都是无关紧要的。\n关键字\n在合法的标识符的基础上，C 语言规定如下的标识符是它自己 本身 用到的词，这些词 不能被用户或者其他的库用作名字。最开始的 C 语言只有如下 32 个关键字：\n12345678char        short       int        unsigned\nlong        float       double     struct\nunion       void        enum       signed\nconst       volatile    typedef    auto\nregister    static      extern     break\ncase        continue    default    do\nelse        for         goto       if\nreturn      switch      while      sizeof\nC99 标准（就是 1999 年出来的标准）添加了这几个：\n1_Bool        _Complex        _Imaginary        inline        restrict\nC11 标准（就是 2011 年出来的标准）添加了这几个：\n12_Alignas        _Alignof        _Atomic        _Generic        _Noreturn\n_Static_assert  _Thread_local\n除去这些，其他都是用户可用的标识符，你可以给你的变量或者函数起任意满足标识符要求并且不是关键字的名字。\n注意：考试的时候看清楚题干要求，如果问的是 标识符，那么关键字也是正确的，如果问的是 用户标识符、函数名或者变量名，那就不能是关键字。\n关键字说明\n这次只说明一些基础的关键字，对于存储类别关键字暂时不做说明。\n数据类型关键字\n除了 void 这个特别的词用来表示“没有类型”，其它的类型关键字都有具体的指代。这些关键字用来标记内存中存储的数据类型是什么，基础的类型有下面几个:\n\nchar：长度为 1 字节，通常用来存储字符。\nshort：长度为 2 字节，用来存储短整数。\nint：长度不确定，考试时候通常认为是 4 字节，通常用来存储整数。\nlong：长度不确定，通常用来存储长整数（大部分现代机器上，int 和 long 一样长）。\nlong long：长度为 8 字节，是 C 里最长的整数类型。\nfloat：长度为 4 字节，存储单精度浮点数，通常精确度较低。\ndouble：长度为 8 字节，存储双精度浮点数，精确度较高，开销略大。\n\n还有一些修饰这些类型用的关键字：\n\nsigned：这个数据可以表示带符号的数字，通常第一位用作符号位，总的数据范围一半正数一半负数（大部分数据类型默认就是带符号的）。\nunsigned：这个数据表示的是不带符号位的数字，即只有 0 和正数，没有负数。例如 unsigned int。\n\n声明变量参照下面的 结构 部分。\n有关数据范围，对于整数，先把长度转成 bit 数，然后有多少 bit 范围就是 2 的多少次方，有符号数正负分别一半一半，负数比正数多一个数，无符号数则就是 0 到这个数。\n还有一个定义结构类型的关键字 struct，这个关键字用来定义结构体，结构体可以把一些数据打包在一起，构成一个独立的类型，比如\n1234struct point {\n        int position_x;\n        int position_y;\n};\n定义了一个结构体，以后就可以使用 struct point 作为一个新的数据类型。访问结构体使用 . 和 -&gt;。\n还有一个类型别名关键字 typedef，它用来给一个现有的数据定义一个别名，例如 typedef float scalar;，然后就可以用 scalar 作为一个类型，这个类型和 float 是一样的。\n有关数据类型还要注意一点，相同的数据类型进行运算，得到的类型还是原来的类型，如果是不同的数据，会向表示范围更大的数据类型转变。比如整数和短整数进行计算得到整数，整数和浮点数运算得到浮点数，双精度浮点数和单精度浮点数运算得到双精度浮点数。\n在将一个值赋给另一个值的时候类型会被转换成被赋值的数据类型，比如 int a = 3.0; 实际上 a 的值为 3。但上述的运算规则发生在赋值之前，因此就算你写 float b = 5 / 2;，b 的值也是 2.0f 而不是 2.5，因为首先 5 / 2 是整数除整数，得到的就是整数 2，2 转换成浮点数也是 2.0f，因此正确的写法是把 5 或者 2 中的一个改成小数比如 float b = 5.0 / 2;，此时是浮点数与整数运算，首先将整数 2 变成浮点数 2.0，然后得到 2.5。\n流程控制关键字\n条件语句\nif else 的格式如下，如果条件为真，执行语句1，否则执行语句2，也可以不写 else 和语句2。\n1234if (条件)\n        语句1;\nelse\n        语句2;\n嵌套的 else 会和最近的 if 匹配，除非使用大括号显式限制范围。\n12345if (条件)\n        if (条件)\n                语句1;\nelse\n        语句2;\n上面这个 else 会和第二个 if 匹配，而不是第一个。\n12345if (条件) {\n        if (条件)\n                语句1;\n} else\n        语句2;\n这个就和第一个匹配了。\nswitch case 也可以用作条件判断，switch 后面必须接一个条件变量而不是条件语句（这个变量的值必须可以直接用 == 判断相等，很抱歉字符串不可以哈哈哈）。形式如下。\n1234567891011switch (条件变量) {\ncase 值1:\n        语句1;\ncase 值2:\ncase 值3:\n        语句2;\n        break;\ndefault:\n        语句3;\n        break;\n}\n根据条件变量值的不同，会跳到不同的 case 向下执行，重点是向下，也就是说如果匹配了值1，运行语句1后会向下运行语句2，只有在遇到 break 的时候才会跳出 switch 语句，同样不管匹配的是值2还是值3，都会运行语句2，如果没有匹配，会运行 default 标签下面的内容，当然也可以不写 default。\n循环语句\n有三种循环语句，首先是 while 语句，语法如下。\n12while (条件)\n        语句;\n该循环会在条件为真时执行语句，条件为假则退出循环，每次循环都会先判断一次条件再决定是否循环。\n然后是 for 语句，语法如下。\n12for (循环开始前做一次; 条件; 每次循环结束都做)\n        语句;\n该语句在循环开始前执行第一个分号前的内容 一次，然后判断条件决定是否进入循环，在每次循环中的语句结束后，都会做第二个分号之后的内容。如果不想做某一个部分，直接空着就可以，但要保留分号。比如下面的 for 循环就和 while 循环等价。\n12for (; 条件;)\n        语句;\n最后是 do while 循环，用于需要先做一次循环内容再做判断的情况。\n123do\n        语句;\nwhile (条件);\n12345do {\n        语句1;\n        语句2;\n        语句3;\n} while (条件);\n跳转语句\n有四种跳转。\ngoto 是无条件的基于标签的跳转。标签就是在某一句前写一个标识符然后加冒号。\n12标签: 语句；\ngoto 标签;\n这段代码会造成一个死循环，用于在这两句之间跳来跳去。不建议使用 goto 语句，因为在程序里跳来跳去很容易让人逻辑混乱，从而无法调试。\nreturn 语句通常用于在函数中返回一个值，比如 return 0; 返回整数 0，当函数返回之后，该函数就结束了，即使后面还有语句也会被忽略，如果不想返回值，直接 return;。\n剩余两种都是主要用于循环中的语句。\nbreak 用于打断一个循环，从循环中跳出来，比如下面的循环。\n12for (; 1; 语句)\n        break;\n如果没有 break 这个语句是一个死循环并且每次都运行语句，但是有 break，第一次进入循环之后就跳了出来，不会执行语句。\ncontinue 用于跳过本次循环中的剩余部分，直接进行下次循环。\n12345for (开始; 1; 语句1) {\n        语句2;\n        continue;\n        语句3;\n}\n这个程序在执行完开始之后，每次循环都执行语句1，然后 continue 直接结束这次循环进入下一次，因此语句3就不会被执行，但对于 for 循环语句1会被执行。\n通常情况下，break 和 continue 都和 if 搭配使用，它们可以解决大部分情况而不需要 goto。\n结构\nC 程序主要包含以下部分：\n\n预处理器指令\n函数\n变量\n语句和表达式\n注释\n\n注释\n注释用于表示“这部份是给我自己看的，编译器并不需要这部份”，通常我们用它写一些提示自己的语句，编译器会忽略它们。写注释是个好习惯。\n第一种注释使用 /* 和 */，凡是在这两个符号之间的都是注释，这种注释可以跨越多行。\n123456/*\n我是注释\n我是注释\n我是注释\n*/\n/*我是注释*/\n第二种注释使用 //，它的范围是从 // 到这一行的结尾（换行符）。\n12// 我是注释\n我不是注释\n调试程序的时候也可以临时注释掉一部分问题代码，相比删除，这样可以随时恢复它们。\n语句和表达式\n表达式通常做一个动作并得到一个值（注意没有值也算是一种特殊的值），比如 1 + 1 是一个表达式，这个表达式的值为 2，表达式可以互相组合，比如 (1 + 1) * 2，这个表达式的结果为 4。\n需要注意一些特别的运算符表达式的值，比如我们令 int i = 1;。不管是 i++ 还是 ++i，执行结束后 i 都会变成 2，但是从表达式的值的角度来说，i++ 这个式子的值是 1，而 ++i 值是 2，-- 同理。\n也就是说， i++ == 1 是 真的，++i == 1 是 假的，++ 在前就先加后值，++ 在后就先值后加。\n不要自作聪明，对于 C 语言标准，并没有规定诸如 y=i+++++i（其实就是 y = i++ + ++i）的运算过程。编译器可以认为这两个式子里的 i 都是 1，也可以认为一个是 1 一个是 2，还可以认为都是 2，那 y 就可能是 2 3 4 甚至是奇奇怪怪的不可预测的值。如果考试出现这种问题，建议直接告诉老师题有问题。\nC 语言规定语句以分号 ; 结束而不是以换行符结束，因此你可以在一行里写多条语句，也可以在多行里写一条语句，编译器会阅读其中的分号。一个单独的分号也是一个语句——它什么也不做，我们叫它空语句。\n比如\n11 + 1; 2 + 2;\n是两条语句。但是\n123(\n        1 + 1\n) * 2;\n是一条语句。\n对于 C 关键字中的流程控制关键字，通常它们的作用 只能控制它们下面的一条语句，大括号 {} 可以在文法上将几个语句结合成一个语句（说人话就是如果你想在这些关键字后面接两条或以上的语句，就要加大括号），例如\n1234if (true) {\n        do_one();\n        do_another();\n}\n当然，一个空的大括号 {} 也是空语句。\n函数\n函数是 C 语言中最主要的组成部分，C 语言程序主要就是由各个函数组成。函数类似于数学中的函数，它们接受一些参数，然后做一些操作，最后返回 一个 值（C 限定函数只能返回单个结果或者不返回结果）。\n一个函数的结构通常是像下面这样\n1234返回值的类型 函数名(参数类型 参数变量名, 参数类型 参数变量名)\n{\n        函数的内容\n}\n返回值的类型限制了函数返回的数据的类型（说人话就是你前面写啥类型后面就得返回啥），如果没有返回值，这里使用 void。\n函数名则是一个用户标识符，然后在小括号 () 里放接受的参数列表，按照 参数类型 参数变量名 的格式，中间用逗号连接，如果不接受参数，这里使用 void。\n上面这一部分通常叫做 函数头。\n函数的内容放在大括号里面，这一部分也通常叫 函数体，在这里你可以写 C 语句。\n如果你指定了函数类型，函数内容里必须用 return 表达式返回一个对应类型的值，否则你会得到一个 Error。\n比如有一个限制为处理整数的数学函数 f(x) = x * 2，写成 C 的函数就是下面这样。\n1234int f(int x)\n{\n        return x * 2;\n}\n变量\n变量对应着内存里的一块空间，里面存储着一些数据，必须 先声明一个变量才能使用，声明指定了变量的类型和名字。\n声明变量的时候使用类似这样的格式。\n1变量类型 变量名 = 初始值, 变量名 = 初始值;\n首先是变量的类型，然后跟着变量名组成的列表，列表之间用逗号分割，也可以同时提供初始值，只需要使用 = 赋值，可以省略 = 和初始值，这时这个变量的值是 不确定的。\n例如 int a, b, c = 2;。\n题外话：建议给变量起个容易理解它是什么的名字，而不是一堆乱七八糟的字母，比如 my_age 就比 x3 更容易理解。在变量名里写上变量类型倒不是个好主意，因为稍微高级点的编辑器都能推导类型，这样写纯粹是浪费空间。\n变量是有作用域的，你不能在作用域外面调用作用域里面的变量，但反过来是可以的，也就是说作用域满足嵌套关系。\n同一个作用域里变量不可以重复声明，否则会得到一个 Error。但如果内层作用域声明了一个和外层重名的变量，内层的会暂时覆盖外层的，也就是说你暂时没办法访问外层的那个。\n通常来说，函数是一层作用域，然后则是对于每个判断或循环语句，它们的条件和它们控制的代码块（就是大括号里面）有一个单独的作用域。也就是说你在循环体里面声明的变量在外面是不能访问的。比如这段代码。\n123456789// 你应该能看懂这个函数没有返回值也没有参数。\nvoid func(void)\n{\n        int x = 1; // 函数作用域。\n        int y = 2;\n        for (int x = 2; x &lt; 10; ++x)\n                printf(\"%d %d\\n\", x, y);        // 这里会输出 2 2 到 9 2 共八行数。\n        printf(\"%d\\n\", x);        // 这里的 x 还是 1！\n}\n如你所见，第一次我们声明的变量 x 和 y 属于函数作用域，随后 for 语句中声明的 x 就是循环代码块作用域了，这个 x 暂时掩盖了外面的 x，当离开循环之后，我们又访问到了函数作用域的 x。\n我们还可以一次批量分配多个元素，这种方式被称为数组，数组的声明方式通常是下面这样：\n1数据类型 变量名[数组长度] = {元素, 元素, 元素};\n= 和后面的部分是为了进行初始化，当然你也可以不进行初始化。\n数组中的元素在内存中是连续的，当你想访问其中的某个元素，只需要使用 数组名[元素序号]。这里的序号是从 0 开始的！也就是说长度为 5 的数组，元素序号分别是 0、1、2、3、4。\n你可以写超出数组长度的序号，C 并不会阻止你这样做，但通常这样会触发一个错误，因为那个位置的内存并不一定让你访问。换句话说，C 语言相信你会限制访问的长度，所以它不进行限制。\n如果你在声明的时候没有进行初始化，那你以后就不能再像初始化元素一样给整个数组直接用 = 赋值了，具体的原因需要等讲过指针之后再进行说明。这个时候你可以给 数组名[元素序号] 进行单个的赋值。比如把 arr 的三个元素都设置成 0。\n1234int arr[3];\narr[0] = 0;\narr[1] = 0;\narr[2] = 0;\n相比于在代码里书写多个变量如 int a1, a2, a3; 使用类似 int arr[3]; 让我们有了在循环中处理它们的办法，你不能在循环中处理变量的名字（这可不是简单地拼字），但你却可以循环处理数组的下标。比如把 arr 的三个元素都设置成 0 还可以这样做。\n123int arr[3];\nfor (int i = 0; i &lt; 3; ++i)\n        arr[i] = 0;\n预处理器指令\n严格来说，预处理器指令并不是 C 语言的一部分，它们在编译器最开始处理代码的时候进行工作，然后当编译器开始将代码翻译成机器码的时候，预处理器已经工作完毕了。\n预处理指令以 # 开头，每一行为一个语句，大部分预处理指令都是与文本替换有关。\n这里介绍几个简单的例子，复杂的后面会单独说明。\n#include &lt;文件名&gt; 表示将这个文件的内容插入到这一行的位置，一般用来引用头文件，&lt; &gt; 括起来的是系统的头文件名，如果引用的是自己项目里的头文件，则需要用 #include \"文件名\"。\n#define 标识符1 标识符2 表示在文件里所有出现的标识符2都会被替换成标识符1，比如下面的代码。\n123#define PI 3.14\nint c = 2 * PI * 5;\nint s = PI * 5 * 5;\n在编译器翻译代码到机器码的时候，它看到的代码其实是\n12int c = 2 * 3.14 * 5;\nint s = 3.14 * 5 * 5;\n示范\nHello world!\n好了，在介绍完这些复杂的东西之后，终于可以进行一个简单的程序示范了，现在书写一个 hello world 就不会遇到有哪里说不明白的情况。\n123456#include &lt;stdio.h&gt;\nint main(void)\n{\n        printf(\"Hello world!\\n\");\n        return 0;\n}\n首先第一行的 #include &lt;stdio.h&gt; 表示我们把 stdio.h 这个头文件里的内容全部插入进来，stdio 表示 standard input output 即标准输入输出（这里的输入输出是从程序的角度）。C 语言自身标准规定了许多有用的内置函数给我们使用，但我们首先要在代码里声明它们，这个头文件就包含了一些函数的声明，后续会继续说明头文件的作用与内容。\n然后我们声明一个名称为 main，返回类型为 int，不接受参数的函数，这个函数是 C 语言规定的程序入口，也就是说操作系统运行你的程序，实际上是从调用 main() 开始的，这里需要注意的是在 C 语言标准中，main() 的返回值必须为 int，你可能见到过 void main() 或者干脆连 void 这种返回类型都不写的，这些都是错误写法，某些不标准的编译器可能支持，但实际上标准里没有它们，你在写代码的时候不能这么写。\n这个函数的内容只有两句，第一句 printf(\"Hello world!\\n\"); 会在你的终端界面输出一句 Hello world! 并换行，在这个过程中我们调用了这个叫做 printf() 的函数，它是 C 标准库规定的格式化输出函数（f 可以理解成 format），但我们这次只是用它输出一条字符串，\\n 是一个转义字符，我们用它表示“回车”这个无法在代码里打出来的符号，如果你去掉它，然后再输出点什么，你会发现这两次的输出会出现在同一行里面——C 不会乱做任何你没让它做的事情。有关 printf() 和转义字符的更多内容，下次会进行介绍。\n对于字符串，你可以简单的理解为小说或剧本里面人物说的话，如果不用双引号，剧本里的文字就是叙述性的语句，并不会被观众得知，程序也是一样，不加双引号的均是程序代码，当你想跟用户交流，使用字符串吧。有关字符串的存储方式，也会在后续讲解。\n最后，main() 函数返回整数 0，这个返回值会被它上层的程序捕获（可以简单理解为操作系统），0 在这里约定是程序运行成功的意思，一个复杂的程序可能有多种多样的失败原因，这个时候我们可以用无数的非零值代表各种错误。\n还记得之前关于 return 的说明吗？如果我们把 main() 改写成下面这样。\n123456int main(void)\n{\n        printf(\"Hello world!\\n\");\n        return 0;\n        printf(\"老师永远也不会看见这句话。\");\n}\n你有可能会得到编译器的警告，但它只是提醒你最后这句 printf() 不会被执行，如果你的老师不看源码，他/她永远也不知道这句话。（另外这句话输出之后并不会换行。）\n有关缩进\n缩进这个词有点陌生，程序员用它指代代码的排版格式，尽管 C 给了你把所有程序写在同一行里的能力，但我估计看过这种代码的人都想把作者打一遍出气。\n12#include &lt;stdio.h&gt;\nint main(void){printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");printf(\"Hello world!\\n\");return 0;}\n当你写了一个复杂一点的程序的时候，有必要修理一下程序格式，让它变的更容易理解，我们在前面说过一个分层次的东西叫作用域，刚好可以利用它。我们可以在每一个作用域的内部语句的行首增加一定数量的空白，来突出层次感。比如在这段代码里指出一个错误\n12345678910111213141516171819void func(void)\n{\n        for (int i = 0; i &lt; 10; ++i) {\n                for (int j = 0; j &lt; 10; ++j) {\n                        for (int k = 0; k &lt; 10; ++k) {\n                                if (0 = k % 2) {\n                                        printf(\"老师会看见很多次这句话。\");\n                                }\n                        }\n                        for (int k = 0; k &lt; 10; ++k) {\n                                for (int l = 0; l &lt; 10; ++l) {\n                                        if (l % 2 == 0) {\n                                                printf(\"老师会看见很多次这句话。\");\n                                        }\n                                }\n                        }\n                }\n        }\n}\n就比在这段代码里\n1void func(void){for(int i=0; i&lt;10; ++i){for(int j=0; j&lt;10; ++j){for(int k=0; k&lt;10; ++k){if(0=k%2){printf(\"老师会看见很多次这句话。\");}}for(int k=0; k&lt;10; ++k){for(int l=0; l&lt;10; ++l){if(l%2==0){printf(\"老师会看见很多次这句话。\");}}}}}}\n要容易的不止一点半点。\n通常这个空白是一个 Tab 按键，或者八个空格，或者四个空格，只要你的一份代码里选择其中一个就可以了，不要搞得参差不齐就行。\n通常还建议你只在一行里书写一个语句，因为你所看见的代码可能有误导性，比如\n12if (条件) do_one();\n        do_another();\n究竟哪个函数受到条件控制呢？现在也许你分得清，当你写了几百行代码后，可能你就感觉它开始辣眼睛了，建议你写成下面这样：\n123if (条件)\n        do_one();\ndo_another();\n还有一个建议是，虽然人们在左大括号放在上一行行尾还是单起一行的行首争论不清，但右大括号单独放一行总是没错的。左大括号的两种风格都是好的，你只需要坚持某一个风格就好了。\n123if (条件) {\n        do_one(); }\n        do_another();\n就不如\n1234if (条件) {\n        do_one();\n}\ndo_another();\n二元运算符两侧建议加空格，比如 int a = 1 + 1 * 3; 就比 int a=1+1*3; 清晰。\n这些都只是建议，但当你写了一定数目的代码，它们能帮助你少犯乱七八糟的错误，别人读你的代码也会更容易。\n提问的艺术\n有时候你自己实在搞不清楚一个问题了，需要问别人。且慢！别人可能很忙，时间宝贵，在一大片代码里找出错的位置就像大海捞针一样愚蠢，特别是许多时候，编译器已经可以告诉你代码哪里错了的情况下。\n在 Google 上搜索“提问的艺术”能找到好多有用的东西，这里只说一条最重要的：当你提问时，请贴上你完整的代码、编译器编译过程中输出的警告和错误（通常在 IDE 下面的小窗口里）以及你代码运行时的输出截图（如果程序通过了编译但运行出错了）。\n最愚蠢的是只说一句没头没脑的“我代码错了！怎么办！”，你就是说一千遍，它还是错的。第二愚蠢的是说一句“我代码错了！我先干了什么什么后干了什么什么又怎么怎么样！”，你是要自己重新描述一遍？还是打算自己从嘴里重新发明个 C 语言？万一你犯的错误是漏了个分号或者括号，我不信你能用嘴描述一遍你代码里的所有分号的位置。\n贴上完整代码保证别人帮你除错的时候不需要回头问你然后等待回复，贴上编译器输出可以直接看到它提示的可能错误的位置（而不是一句一句去读去想），输出截图也是同样的道理。\n别人帮你是自愿花费他的时间，做到以上这一点至少能让别人帮你找错误更容易。\n"},{"title":"我们如何哭泣","url":"/posts/Too-Busy-for-Tears/","content":"\n九月的最后一天，我的网站突破了八万访问量。\n本来有好多可以随便写一点来掩盖自己“九月就要过去了我什么也没写”的恐慌感，比如接着写一篇有关怎么画立方体的 OpenGL 教程，比如还没有文档的 Hikaru 代码里有哪些奇怪的解决方案和奇怪的设定，比如我最近又写了什么乱七八糟的代码（没有）。\n但与其随便说说外界的事情，不如把自己随便想的东西写出来更加严肃。\n\n\n有时候常常因为太忙而忘记如何哭泣。尽管眼角的泪水会随着萧瑟的秋风流下，那里面有整个世界和它的影子，但却少了一些流泪的理由。\n是因为天边那抹如血般赤红而哭泣吗？\n我觉得自己常常陷入不该发生的慌乱之中。如果我有在事情伊始就洞察结局的能力，可能就不会如此慌乱。至少有些人的平静是因为他们预料到了所有可能的发展，而我不是，面对事情的平静往往只是外表而已，尽管有时候已经疲惫到无力，还是要装作一副一切尽在掌握的样子。\n能拯救自己的唯一途径也不过是不去回想而已，“随便你怎么样，过去了就好了”，是个万能的替代品。\n“如果一开始就能做到最好就好了。”\n“如果一开始就能发现问题及时退出就好了。”\n“如果一开始就能有最顺利的情况就好了。”\n反正这些都不可能，那有能够及时分辨现状并放弃的能力也是解药。与其在不擅长的事情里周旋，不如拿出勇气放弃掉，反正得不到什么，只要不失去什么就行了。\n所以你看我又在说一些没用的东西。它们完全没有让事情变的更清晰，反而让我的心情变的更佳糟糕。\n独居一室真是令人舒适。\n我又熬过了一个所谓“分别的季节”，真是万幸，不过话说回来，连分别都没有才是最难过的事情吧。想起那句话叫“十七岁有着七十岁的忧愁”，我已经过了这个年纪了啊。\n该如何才能有勇气在清晨的冷风中拥抱太阳。\n在晚上九点强说愁的人，只能写出这样糟糕的文章，那就是我。让人越来越忙是让他们闭嘴的好办法，因为他们闲下来就忘记了如何说话。反正什么都不能说，自然也没必要思考。\n技术文章会有的。\n希望在逐渐到来的冬季再次相遇，我们还有着尽情哭泣的能力。\nTears are our hardest word.\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"学习 OpenGL 1","url":"/posts/Learn-OpenGL-1/","content":"我花了好久来阅读和实践 Learn OpenGL CN 上面的 OpenGL 教程，尽管它是大家推荐的最容易懂也比较新的教程，里面一些东西还是会让人觉得一头雾水。我用了很长的时间来尝试那些教程没有写成文字的部分并确定它们是如何工作的。也许对于一个有足够经验的人来说这些看起来并不是什么大问题，但我觉得新人知道这些以后可以更快的继续学习，而不是花费时间在诸如“这段代码干了什么？”“为什么我的黑屏了？”“如果我想编写一个更复杂的图形程序，该怎么把这些复制过来的代码拆开？”的问题上。\n\n\n话先说在前面，虽然标题我写了 OpenGL，但是我实际上使用的是 OpenGL ES —— 你可以把它当作是 OpenGL 的一个子集，只包含基于可编程管线的部分 API，去掉了那些过时的旧模式。虽然 OpenGL ES 主要为移动设备设计，但是在电脑上也能正常使用。Wayland 和 Weston —— Linux 的下一代桌面协议以及它的简单实现 —— 为了去掉 Xorg 的依赖就使用了 OpenGL ES（Linux 下的 libGL 总会引入 X）。\n我使用的是 OpenGL ES 3，最新版本，而且我觉得这里的 OpenGL ES 程序只要做一点简单的改动就可以变成 OpenGL 的程序 —— 毕竟 OpenGL ES 使用的函数就是 OpenGL 的一部分。\nOpenGL 是什么？\n简单来说，OpenGL 是一套 API（废话），它把你传输的三维坐标交给显卡运算并映射到显示器的二维平面上。实际上它仅仅做了这些 —— 和你的显卡交流。使用 OpenGL ES 3 的好处是它没有早期版本中 OpenGL 的立即渲染模式，通常来说这个模式很容易使用（就像 Canvas 绘图）但是效率低下。一些人不会使用核心模式（可编程管线）而是使用旧的模式也导致了所谓的 OpenGL 性能差，但实际上 OpenGL 只是一个规范，具体的性能很容易受到不同厂家实现不同编写人员的影响（给猴子一把磨得很快的斧头的直接后果很可能是猴子砍了自己的脚）。如果打开一份教程上面出现 glBegin()、glEnd() 我建议你立即关掉。\n创建窗口\n首先既然我们要绘图，需要先有窗口。窗口创建之后才可以创建一个 OpenGL 的 Context。对于这个需求不同的平台有不同的方案，比如 Windows 的 WGL，Xorg 的 GLX，以及为了独立于各个平台使用的 EGL（Wayland 为了摆脱 Xorg 使用的就是 EGL），但我们在这里使用一个简单高效的封装库 GLFW。\n首先需要你自己安装 GLFW 库到你的系统中，Linux 用户可以使用包管理解决这个问题，Windows 用户就需要自己下载并放置到你工具指定的位置了（注意头文件的位置并修改 IDE 的搜寻路径 —— 异常麻烦的事情）。\n对于 OpenGL 本身而言，如果你安装了 Mesa（Linux），你应该有一个开源的实现了。Windows 用户可能需要一些处理以保证自己用的是最新版本（据说微软为了推广 D3D 打压 OGL Windows 系统只包含旧的 OpenGL 库，不知道是不是真的），我没有在 Windows 下面编写过，不能给你建议。\n对于 OpenGL 大部分函数地址是运行时确定的（各个驱动的实现不一样），所以需要类似于 GLEW 或者 GLAD 之类的库来在代码中搜寻保存函数指针，但我这里使用 OpenGL ES 似乎是可以直接链接的，所以我没有使用（有错误请告诉我，我好改正）。\n然后我们打开一个 C 文件 —— OpenGL 库是用 C 编写再封装到其它语言的。\n12345#include &lt;stdio.h&gt;\n#include &lt;stddef.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;GLES3/gl3.h&gt;\n这里很明显了。OpenGL 只是一个绘图 API，GLFW 同时帮你封装了有关键盘鼠标输入的部分，但是你需要给它实现一个回调函数。\n12345void key_callback(GLFWwindow *window, int key, int scancode, int action, int mode)\n{\n    if (key == GLFW_KEY_ESCAPE &amp;&amp; action == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, true);\n}\n只是简单实现了按 Esc 之后发送关闭窗口事件。然后我们编写 main 函数。\n123456789101112131415int main(int argc, char *argv[])\n{\n    glfwInit();\n    unsigned int width = 800;\n    unsigned int height = 600;\n    GLFWwindow *window = glfwCreateWindow(width, height, \"learn-gles\", NULL, NULL);\n    glfwMakeContextCurrent(window);\n    glfwSetKeyCallback(window, key_callback);\n\n    /* Code Here */\n\n    glfwDestroyWindow(window);\n    glfwTerminate();\n    return 0;\n}\n先别急着编译它，因为你还没有正确链接。如果你编译好了，这个程序运行之后窗口一闪而过就会消失，但你已经完成了窗口创建。\n如果是 macOS 请在 glfwInit() 之后添加 glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);，并咒骂苹果为什么去掉了 OpenGL 支持。\n接下来我们进行 OpenGL 代码的编写。\n绘制三角形\n三角形是计算机图形学里基本的图元，更复杂的模型通常都是用三角形拼合的，这也是为什么人们会用 每秒渲染多少个三角形 来表示显卡性能。\n创建视口（Viewport）\n首先我们创建 OpenGL 的 Viewport，事实上不管你的窗口分辨率是多少，OpenGL 都会把这个平面映射到 -1.0f 到 +1.0f，你使用时候的坐标都是在这个范围内，而不是屏幕上的像素点数目。\n下面的代码需要插入到上面 /* Code Here */ 的上面。\n1    glViewport(0, 0, width, height);\n因为我们的程序太过简单，就不需要开启其它特性了，否则在这里你可以开启一些 OpenGL 的特性比如背面剔除（如果你玩 CS，你会发现死亡画面你的摄像机经常会穿进敌人体内，这时候敌人的后背变成了透明的，这就是背面剔除，可以减少绘制的图形的数量。\n大循环\n如果你对游戏引擎有所了解，应该知道整个流程就是一个大循环：引擎不断地绘制图案并把它更新到屏幕上，每一帧我们更新一些数据，就会形成动画。我们这里也是这样进行，在 glViewport() 和 glfwTerminate() 之间插入这个。\n12345678910    while (!glfwWindowShouldClose(window)) {\n        glfwPollEvents();\n\n        glClearColor(0.0f, 0.0f, 0.0f, 0.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        /* Draw Here */\n\n        glfwSwapBuffers(window);\n    }\n现在我们有一个大循环了，这个循环里首先拉取 GLFW 的事件以便响应（目前只有 Esc 退出），然后用黑色清除整个 Viewport（四个参数分别是 rgba，0.0f 是无色，1.0f 是满色），最后 GLFW 把绘制好的缓冲区交换到窗口上。\n现在你可以使用下面的命令编译并运行它了。会出现一个全黑的窗口。\n1$ cc -std=c11 -lglfw -lGLESv2 yourcode.c &amp;&amp; ./a.out\n\nMesa 把 GLES 3 当作 GLES 2 的扩展，所以这里链接的是 libGLESv2。\n着色器（Shader）\n什么是 Shader？Shader 是一种运行在显卡上的小程序。首先你知道 CPU 一般是多核的，每个核心可以单独运行不同的程序。然而你的屏幕是由多个像素组成的，在运行游戏的时候每个像素的数据都需要单独计算，即使每个都是简单的乘法，CPU 也很难在短期内全部处理完毕（几十万个像素是很难由八个核心在 16ms 之内解决掉的），所以 GPU 为了解决这个问题，带有许多互相独立的小核心，每个核心的性能是远远不如 CPU 的，但它们处理的问题也没有 CPU 复杂，所以可以很快的处理掉屏幕上全部的像素。\n一般你的数据只会包含几个顶点的位置，这时候你可以编写小程序去处理这些顶点的数据，比如位移或者从数据中获取颜色，这一步的程序叫做 Vertex Shader（顶点着色器），然后 OpenGL 会把首先把这些顶点连接起来，再计算出中间的范围，对中间的部分进行插值，然后把它们映射到一个一个的像素点上，这个过程叫做 光栅化，然后接下来 GPU 中的每个小核心就开始单独处理一部分像素了，为了增加效率和创造更好地效果（光照效果之类的影响最终颜色的），你可以编写小程序交给这些小核心运行，这一步的程序叫做 Fragment Shader（片段着色器）（在 Direct3D 里面叫 Pixel Shader 像素着色器）。OpenGL 使用一种叫 GLSL 的语言编写着色器，在这一步你需要建立两个文件，首先是 triangle.v.glsl（名字可以随意）的顶点着色器。\n123456789#version 300 es\nlayout (location = 0) in vec3 pos;\nlayout (location = 1) in vec3 color;\nout vec3 pass_color;\nvoid main()\n{\n    gl_Position = vec4(pos, 1.0f);\n    pass_color = color;\n}\n第一行的预处理指令表明了我们使用的是 3.00 版本的 OpenGL ES，如果是 OpenGL 可以使用 #version 330 core，然后二三行声明了输入变量，前面的 layout (location = 0) 指定了它们的位置，也可以省略，但是就需要在程序里手动查找位置了。后面的 in 表明是输入变量，vec3 表明是由三个数字组成的向量，后面是变量名，我们用到了位置和颜色。然后下面 out 表明是输出变量，很明显 Vertex Shader 是不能控制颜色的，Fragment Shader 才控制颜色，所以我们在这里把传进来的颜色再输出，下一步传给 Fragment Shader。\n然后程序从 main 开始执行，这里 不需要返回值，gl_Position 是内置的变量，你需要把顶点的最终变换完的位置赋给它，这里我们没有变化，直接把三元坐标转换成四元的齐次坐标。然后把输入进来的颜色传出去。总之，如果你保证 Vertex Shader 输出的变量和 Fragment Shader 输入的变量名字一样，OpenGL 就会把它们连接起来。\n接下来我们建立 triangle.f.glsl，如下。\n12345678#version 300 es\nprecision mediump float;\nin vec3 pass_color;\nout vec4 frag_color;\nvoid main()\n{\n    frag_color = vec4(pass_color, 1.0f);\n}\n第二行表明的是设置精度为 float，OpenGL ES 要求 Fragment Shader 必须有这一条，标准 OpenGL 可以去掉，与 gl_Position 不同，为了满足多样化的需求，Fragment Shader 的输出变量需要自己声明，然后我们给输入的颜色加上 1.0f 的 Alpha 值输出。\n接下来类似于我们编译 C 程序的过程，不同的是我们要编写 C 代码读取文件，分别编译并链接为一个程序。我在这里直接给出我封装好的过程来简化代码量，具体说明参见注释。你可以把它们添加到 main 函数外面（上面）。\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#define LINE_LENGTH 512\n\nGLuint make_shader(GLenum type, const char *const shader_src)\n{\n    GLuint shader = 0;\n    GLint compiled = 0;\n    // 创建 shader。\n    if (!(shader = glCreateShader(type))) {\n        fprintf(stderr, \"Shader Create Error.\\n\");\n        return 0;\n    }\n    // 加载 shader 内容。\n    glShaderSource(shader, 1, &amp;shader_src, NULL);\n    // 开始编译。\n    glCompileShader(shader);\n    // 检查编译结果。\n    glGetShaderiv(shader, GL_COMPILE_STATUS, &amp;compiled);\n    // 编译失败的话读取错误输出。\n    if (!compiled) {\n        GLint info_len = 0;\n        glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &amp;info_len);\n        if (info_len) {\n        char *info = malloc(info_len * sizeof(*info));\n        if (!info) {\n            fprintf(stderr, \"Malloc Error.\\n\");\n            glDeleteShader(shader);\n            return 0;\n        }\n        glGetShaderInfoLog(shader, info_len, NULL, info);\n        fprintf(stderr, \"Compile Error: %s\\n\", info);\n        free(info);\n        }\n        glDeleteShader(shader);\n        return 0;\n    }\n    return shader;\n}\n\nGLuint load_shader(GLenum type, const char *const shader_path)\n{\n    GLuint result = 0;\n    FILE *fp = NULL;\n    size_t file_length = 0;\n    char *file_content = NULL;\n    char temp_line[LINE_LENGTH];\n    // 读取文件不用解释了吧……\n    if (!(fp = fopen(shader_path, \"r\"))) {\n        fprintf(stderr, \"Open file %s failed.\\n\", shader_path);\n        return 0;\n    }\n    fseek(fp, 0l, SEEK_END);\n    file_length = ftell(fp);\n    rewind(fp);\n    if (!(file_content = malloc(file_length))) {\n        fprintf(stderr, \"Malloc Error.\\n\");\n        fclose(fp);\n        return 0;\n    }\n    file_content[0] = '\\0';\n    while (fgets(temp_line, LINE_LENGTH, fp))\n        strncat(file_content, temp_line, LINE_LENGTH);\n    fclose(fp);\n    result = make_shader(type, file_content);\n    free(file_content);\n    return result;\n}\n\nGLuint load_program(const char *const vshader_path, const char *const fshader_path)\n{\n    GLint linked = 0;\n    GLuint vshader = 0;\n    GLuint fshader = 0;\n    GLuint program = 0;\n    // 加载类型为 GL_VERTEX_SHADER。\n    vshader = load_shader(GL_VERTEX_SHADER, vshader_path);\n    // 加载类型为 GL_FRAGMENT_SHADER。\n    fshader = load_shader(GL_FRAGMENT_SHADER, fshader_path);\n    if (!vshader || !fshader)\n        return 0;\n    // 创建 Shader Program。\n    if (!(program = glCreateProgram())) {\n        fprintf(stderr, \"Program Create Error.\\n\");\n        return 0;\n    }\n    // 给 Program 添加 Shader。\n    glAttachShader(program, vshader);\n    glAttachShader(program, fshader);\n    // 将两个 Shader 链接成 Program。\n    glLinkProgram(program);\n    // 链接完成可以删除 Shader 了。\n    glDeleteShader(vshader);\n    glDeleteShader(fshader);\n    // 检查链接状态。\n    glGetProgramiv(program, GL_LINK_STATUS, &amp;linked);\n    // 链接失败读取错误输出。\n    if (!linked) {\n        GLint info_len = 0;\n        glGetProgramiv(program, GL_INFO_LOG_LENGTH, &amp;info_len);\n        if (info_len) {\n            char *info = malloc(info_len * sizeof(*info));\n            if (!info) {\n                fprintf(stderr, \"Malloc Error.\\n\");\n                glDeleteProgram(program);\n                return 0;\n            }\n            glGetProgramInfoLog(program, info_len, NULL, info);\n            fprintf(stderr, \"Link Error: %s\\n\", info);\n            free(info);\n        }\n        glDeleteProgram(program);\n        return 0;\n    }\n    return program;\n}\n有了这个之后只需要在 glViewport() 和 /* Code Here */ 之间调用 load_program() 生成 Shader Program。\n1    unsigned int program = load_program(\"triangle.v.glsl\", \"triangle.f.glsl\");\n顶点数据\n接下来我们需要准备绘制的数据了，对于一个三角形来说，需要三个顶点来确定它的位置，每个顶点需要三个坐标，同时我们还要给它们创建不同的颜色，让我们的三角形变的多彩一点，所以需要像下面一样组织数据。把这段插入到之前 /* Code Here */ 和 glViewport(0, 0, width, height); 之间。对于 3D 程序来说 float 的精度足够了，double需要更多的运算时间。\n123456    const float vertices[] = {\n        // 坐标           颜色\n        -0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 0.0f,\n        0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 0.0f,\n        0.0f,  0.5f, 0.0f, 0.0f, 0.0f, 1.0f\n    };\nOpenGL 的坐标是这样安排的：\n\n从左到右对应 X 坐标 -1.0f 到 1.0f。\n从下到上对应 Y 坐标 -1.0f 到 1.0f。\n从外到里对应 Z 坐标从负到正，需要注意这个可能会被以后的数学变换改变。\n\n我们这里是平面的所以 Z 坐标都是一样的。\n现在我们把数据存储到了内存里面，但是很显然我们需要把数据传给显卡。这时候我们需要创建一个 OpenGL 的 Buffer 对象，并把数据写进去。也有人管这个叫 VBO，但是我觉得这个缩写还没有 Buffer 来的直观。\n12345    unsigned int buffer;\n    glGenBuffers(1, &amp;buffer);\n    glBindBuffer(GL_ARRAY_BUFFER, buffer);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n    glBindBuffer(GL_ARRAY_BUFFER, 0);\n这里的 buffer 只是一个符号，真正的空间分配我们是不能干预的。glGenBuffers()可以生成多个 Buffer，这里我们只生成一个，所以第一个参数设置为 1，第二个则是一个指针，我们这里只有一个所以没有使用数组，而是直接取了地址。\n接下来我们把这个 buffer 用 glBindBuffer() 绑定到 GL_ARRAY_BUFFER 表示这里是放置顶点的数组。glBufferData() 则会把数据写入到刚才绑定好的 buffer，所以要先进行绑定，这里第一个参数表示写入的目标，就是刚才的 GL_ARRAY_BUFFER，第二个则是写入数据的大小，第三个是写入数据的指针，第四个 GL_STATIC_DRAW 表示写入的数据是用来绘图的，不会经常改变。做完这一切我们取消绑定，把 GL_ARRAY_BUFFER 绑定到默认的 0。\n题外话：经常有人吐槽 OpenGL 这个状态机的设定，觉得绑来绑去很麻烦，但是你可以封装一下让它变的好用点。关键要记得处理完就解绑，避免状态混乱。至于 D3D 是什么样子的，我不知道，我也并不关心，就算 D3D 再好，不能让我在 Linux 下使用就是致命的，OpenGL 也许不完美，但它能用，我觉得也挺好。\n接下来还有个关键问题：显卡不知道我们传进去的数据是什么，怎么解释它。它不知道前三列是坐标后三列是颜色，甚至不知道这些数据是整数还是浮点数。所以我们需要使用 VertexArray 来解释 Buffer 中数据的含义，继续插入下面这部份。\n123456789101112    unsigned int vertex_array;\n    glGenVertexArrays(1, &amp;vertex_array);\n    glUseProgram(program);\n    glBindVertexArray(vertex_array);\n    glBindBuffer(GL_ARRAY_BUFFER, buffer);\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void *)0);\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void *)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n    glUseProgram(0);\n    glBindVertexArray(0);\n    glBindBuffer(GL_ARRAY_BUFFER, 0);\n首先我们还是创建一个标记符。然后使用 glGenVertexArrays() 生成，因为这里的数据要输入给 Program，在对 Program 操作之前先要绑定当前 Program，所以调用 glUseProgram(program);，接下来把 vertex_array 绑定到当前状态，然后我们要告诉 OpenGL 这个 VertexArray 对应的是哪个 Buffer，所以也要把刚才的 buffer 绑定到当前状态让它们关联。\n然后调用 glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void *)0); 传递坐标的信息，第一个参数表明这里的数据会被传递到 Vertex Shader 里面 location = 0 的地方，第二个参数表示一次传递三个数据（对应 vec3），第三个表示传进去的是 float 类型，第四个表示是否进行标准化（缩放到 0 和 1 之间），很显然我们不需要，第五个是步长，表示传递完一组数据之后 从这一组数据开头跳过多长会到下一组数据的开头，我们这里是三个坐标三个颜色，所以是六个 float，最后一个是偏移量 Offset，因为我们坐标是从第一个开始，所以是 (void *)0。最后用 glEnableVertexAttribArray(0); 启用位置 0。\n接下来用 glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void *)(3 * sizeof(float))); 传递颜色的信息，这次是位置 1，区别在于第一个颜色是在第四个数据开始的，所以偏移量设置为 (void *)(3 * sizeof(float)))。最后用 glEnableVertexAttribArray(1); 启用位置 1。\n最后不要忘记解绑。\n绘制三角形\n一切准备就绪，终于可以开始和绘制三角形了，下面我们进入循环，在 /* Draw Here */ 那里插入如下代码。\n12345    glUseProgram(program);\n    glBindVertexArray(vertex_array);\n    glDrawArrays(GL_TRIANGLES, 0, 3);\n    glUseProgram(0);\n    glBindVertexArray(0);\n简单多了对不对！因为我们已经准备好了一切，所以这里只要加载你的 Shader Program，然后绑定你的 VertexArray，用 glDrawArrays(GL_TRIANGLES, 0, 3); 告诉 OpenGL 绘制当前 Array 即可，第一个参数 GL_TRIANGLES 表示我们要画三角形（还记得吗，大部分复杂图形都可以用三角形近似拼出来，所以这里有复数），第二个表示从第几个顶点开始，第三个则表示画几个顶点。然后 OpenGL就会按你的要求去画图。最后不要忘记解绑。\n清理\n在退出程序之前最好清理掉你分配的空间，所以在循环后面和 glfwDestroyWindow(window); 之间插入如下部分。\n123    glDeleteBuffers(1, &amp;buffer);\n    glDeleteVertexArrays(1, &amp;vertex_array);\n    glDeleteProgram(program);\n\n还有一件事……\n你可能会问“我还是不知道这些代码怎么拆分成各个部分！”，实际上我文章里的代码片段基本都是互相独立的部分，也就是说它们可以按照顺序放在程序的不同位置，而不必完全紧邻。产生 Buffer，产生 VertexArray 和 Shader Program 不是需要放在大循环里面的，你大可以把这些数据封装起来。\n虽然你成功画出了三角形，但是你可能还是不知道怎样画更复杂的图形，实际上你不需要修改你的顶点数据和 Shader 来改变图形位置。大部分复杂的模型由相应的建模软件导出顶点数据和贴图坐标，你也不需要手动安排这些模型在 OpenGL 坐标系中的位置，后面我会给出使用矩阵和向量运算处理坐标系统的样例。\n如果你觉得这样看代码只是管中窥豹，下面我给出完整的程序链接。\n\nmain.c\ntriangle.v.glsl\ntriangle.f.glsl\n\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"Automata: A Story of Love and Lives","url":"/posts/Automata/","content":"\n我没有办法评价这款游戏因为我觉得我被结结实实地折腾了一回\n\n\n\n\nEverything that lives is designed to end.\n一切活着的事物，都注定要终结。\nWe are perpetually trapped ...\n我们被永远地囚禁……\n... in a never-ending spiral of life and death.\n……于永无止境的生死轮回之中。\nIs this a curse?\n这是一种诅咒？\nOr some kind of punishment?\n还是某种惩罚？\nI often think about the god who blessed us with this cryptic puzzle ...\n我时常想起那用模糊的谜团祝福我们的神……\n... and wonder if we'll ever have the chance to kill him.\n……并猜想我们是否终有弑神的机会。\n\n我大概对动作游戏不感冒。在我最开始对 NieR: Automata 感兴趣的时候，是把它当作剧情游戏来看的，动作只是买剧情附赠的而已。\n一周目结束的时候，我以为这是个讲生命和进化的故事。\n二周目结束的时候，我以为它要说的是爱情。\n三周目开始，我才发现作者是要给玩家一个彻头彻尾的绝望。\n能写出这样的开场白的人，不可能做出一款糟糕的游戏。尽管整个游戏的游玩方式实在是逊色于剧情，整个游戏的玩法总结起来大概就是无穷无尽的跑打跑打跑打，伴随着优美或者说是诡异的配乐。然而排除掉动作和开放世界元素仍然可以维持形式完整，以视觉小说的形式，开放世界大概是由于经费限制并没有什么玩法，我又不是有闲情逸致跑来跑去做任务的人。\n以机械构成昆虫或者战车的形式确实很好的在震撼和恶心之间取得了平衡，随时出现的视角锁定也可以说是独树一帜的特色。\n原本以为一二周目就完整地讲述了进化与爱情，但是和后面的故事比起来，前面的打斗只是岁月静好罢了。\n前两周目是一个玩的人很累但看的人很爽的游戏，当然 PC 版就算了，毕竟 bug 太多，PS4 的优化和画质还是很不错的，特别是与巨型兵器战斗时的满天阴霾。至于配音，英语和日语一样优秀，有时反而是中文翻译失去了英文的特殊味道，第一次在 PC 上启动英文版之后许多表达方式就印在了脑海里。\n三周目则是让看的人和玩的人都感到痛苦。失去 Bunker，失去爱人，足以让人疯狂。机械都进化出了感情，人造人怎么会没有呢？\n故事有多绝望，剧情就可以有多荒谬。\n凌晨三点，经历过所有优秀的战斗场面和恰到好处的音乐之后，还是删掉了存档。一切的一切好像终于结束了，没有办法评价这个故事，没有办法评论其中各种可以说是鬼才的设计，没有办法评价这个游戏。它不像是会让你流出眼泪，只是会让你觉得，这次是结结实实地被横尾太郎折腾了一把呢。\n2B，9S 和 A2 都留下来了，还有什么需要留恋的吗？可惜缺乏的是再来一次的勇气。\n“如果没有战争，我们也不是士兵，是不是也能在这里像人类一样购物呢？”\n但愿是吧。\n\nEverything that lives is designed to end.\n一切活着的事物，都注定要终结。\nThey are perpetually trapped ...\n我们被永远地囚禁……\n... in a never-ending spiral of life and death.\n……于永无止境的生死轮回之中。\nHowever ... life is all about the struggle within this cycle.\n但是……生命的全部意义就在于这轮回中的挣扎。\nThat is what we believe.\n那正是我们所相信的。\n\n\n后记：在 NieR: Automata 原生音乐会“人形们的记忆”上的朗读剧里交待了 Pod 们修复好 2B 和 9S 身体后发生的事情，也就是 E 结局之后的真正结局。按照 The Ark 这个网站的记录，原本的台本是这样的（可靠性未知）（我在这里附上翻译）（看完伤心欲绝的往后看）：\n\n（前情：2B 磨损了自己的手在「塔」的遗迹 40 米深处挖掘方舟留下来的结晶直到由于过载自动关机，然后使用结晶制作疫苗尝试修复 9S 但却失败了。）\nPod 042: Hypothesis: Unit 9S's personal data has been lost.\n辅助机 042: 猜测：机体 9S 的个人数据已经丢失。\n2B: His personal data ... is lost ...?\n2B：他的个人数据……丢失了……？\nPod 042: His personal data was wiped of his own accord, but there is the possibility it was moved to a different location.\n辅助机 042：他的个人数据被从他的个人记录中擦除了，但是也有可能是被移动到了别处。\nPod 042: According to unit A2's records, it is possible his data evacuated using the machine lifeforms' Ark.\n辅助机 042：按照机体 A2 的记录，他的数据有可能是通过机械生命体的方舟疏散到了别处。\nPod 042: Report: Possibility of recovering 9S's personal data extremely low.\n辅助机 042：报告：9S 的数据恢复可能性极低。\nS.P.\n（这个不知道是什么的缩写了……有人知道请教教我。）\n2B: No ...\n2B：不……\n(Three beeps suddenly sound.)\n（突然响起了三声蜂鸣。）\nPod 153: Report: Memory components discovered within traces of personal data.\n辅助机 153：报告：内存组件发现了个人数据的痕迹。\nPod 153: Partial playback possible of memory containing the reason behind his personal data's reparation failure.\n辅助机 153：可用的内存局部回放包含有他个人数据修理失败的原因。\nPod 153: Query: Does unit 2B feel it necessary to repair this memory component?\n辅助机 153：询问：机体 2B 是否认为有必要修复该内存组件？\n2B: ... Repair it.\n2B：……修复。\nPod 153: Understood.\n辅助机 153：了解。\nPod 153: Data repair complete.\n辅助机 153：数据修复成功。\nPod 153: Starting playback.\n辅助机 153：开始回放。\n(9S's voice begins to play back with the sound quality of a radio.)\n（9S 的声音开始以无线设备的音质回放。）\n(He seems to be suffering.)\n（他听起来很痛苦。）\n9S: I didn't ... get on the Ark created by the machine lifeforms.\n9S：我没有……乘上机械生物制造的方舟。\n9S: We YoRHa ... We don't deserve to be loved by this world ... We're just soldiers created to die ...\n9S：我们寄叶部队……我们不值得得到这个世界的爱……我们只是为了死去而制造出来的士兵而已。\n9S: But I ... I think I'm glad ... that I was born as myself ...\n9S：但是我……我很高兴……能够作为我自己而生……\n9S: My personal data, it ... it can't keep it's shape any longer.\n9S：我的个人数据…，它……它没办法再保持它的形式了。\n9S: I wonder if I'm about to disappear ...\n9S：我想我是该离去了……\n9S: But ... I'm okay with that ...\n9S：但是……我觉得还好……\n(2B begins crying, without making a sound.)\n（2B 开始无声地哭泣。）\n9S: Hey, 2B ... We're ... we're not immortal or anything.\n9S：嘿，2B……我们……我们不是不朽的也不是无所不在的。\n9S: Someday, we'll break down and return to the Earth.\n9S：终有一天，我们会损坏并归于尘土。\n9S: But, my existence ... It wasn't meaningless ...\n9S：但是，我的存在……并不是毫无意义……\n9S: Meeting you ... gave meaning to my birth ...\n9S：遇见你……给了我出生的意义……\n9S: Thank you ...\n9S：谢谢你……\n9S: Thank you ...\n9S：谢谢你……\n(9S's voice becomes hidden behind static.)\n（9S 的声音逐渐消失在静电声里。）\n(2B begins weeping.)\n（2B 开始抽泣。）\n2B: Nines ...\n2B：Nines……（抱歉我觉得“奈兹”这个翻译还不如不翻译……太糟糕了……）\nPod 042 (narration): 2B didn't move from where she was.\n辅助机 042（叙述）：2B 没有从她所在的地方移动过。\nPod 042 (narration): She remained there, unmoving ... forever.\n辅助机 042（叙述）：她留在那里没有移动……永远地。\nPod 042 (narration): It was a completely irrational act.\n辅助机 042（叙述）：这是个十分不合理的举动。\nPod 042 (narration): However, \"we\" can now understand the reason behind it.\n辅助机 042（叙述）：然而，“我们”现在可以理解这样做的原因。\nPod 042 (narration): Why it was that 2B didn't move.\n辅助机 042（叙述）：为什么 2B 不再移动。\nPod 042 (narration): Why it was that she didn't speak.\n辅助机 042（叙述）：为什么她不再说话。\nPod 042 (narration): Because \"we\" are now in that same place, feeling the same thing.\n辅助机 042（叙述）：因为“我们”如今也在相同的位置，感受着相同的事情。\n\n然而不知出于什么原因，最终公开的剧本里是 9S “不知出于什么原因” 在疫苗修复失败后醒过来了（“你还知道醒过来啊喂！”），推测可能是横尾老贼害怕继续虐 2B 小姐姐被玩家打死吧。下面附上 B 站带中文字幕的视频，一定要看完啊！\n\n\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"在 VPS 上用 Nginx 和 HTTPS 部署 Hexo 生成的页面","url":"/posts/Hexo-on-VPS-with-Nginx-and-HTTPS/","content":"这个页面记录的方案已经被作者放弃，并且由于时间久远，作者不能保证此页面内容的正确与否，请不要完全参考。\n\n昨天听说微软要收购 GitHub 了，对于我一个专业微软受害者，虽然它洗白了，但还是有着本能的不信任。同时软粉认软做父的样子我是断然接受不了的（“我微软爸爸天下第一！”“你怎么能不喜欢我微软爸爸呢！”“我微软爸爸什么时候坑过你！”），你自己喜欢就喜欢，我讨厌是我的事情，希望各位嘴下留情，不要给我喷成筛子。\n\n\n要说我受害的经历能说好几篇博客，最常见的比如说昨天答辩 PPT 轮到我时候就崩溃了（我可以确定不是我 PPT 的问题，因为关掉所有的 PowerPoint 再打开就没问题了）（“再碰这辣鸡玩意我就是狗！”）。再比如说那个出了名不靠谱的自动更新，你见过更新更新失败回滚回滚失败的嘛？合着我一小时只能对着电脑发呆看你自爆？（当然软粉肯定不承认：“我们更新都成功了！”，这玩意还心诚则灵？反正我被坑了）。倒不是说它收购 GitHub 罪大恶极了，只不过是我自己觉得不舒服就是了，至于普罗大众该干什么干什么，不要管我。\n然后我就把我还算有价值的东西——我的网站，搬到了 VPS 上面，搬迁过程相对简单，用 git 做这个同步肯定是不现实的，因为你想像 GitHub 一样可以直接用 hexo-deployer-git push 的话，你需要建立的是裸仓库，也就是正常的 .git 目录里面的东西，很显然这不是网站内容。看了一圈其他的同步方式，rsync 看起来是最合适的一个了，然后就尝试了一下。\n用 Rsync 上传 Hexo 生成的网页\n首先需要安装 hexo-deployer-rsync，另外也要在自己的电脑和 VPS 上面安装 rsync，首先进入你的 Hexo 站点目录，然后：\n1$ npm i -s hexo-deployer-rsync\n根据发行版不同使用不同的命令安装 rsync：\nArchlinux / Manjaro / Antergos：\n1# pacman -S rsync\nDebian / Ubuntu / LinuxMint / Deepin：\n1# apt install rsync\nRed Hat / CentOS / Fedora（如果找不到 yum 就换成 dnf）：\n1# yum install rsync\n接下来和很多网上的文章说的不一样，很多人把这里的设置理解成要在 VPS 上面开启一个 rsync 的服务器，实际上不是，rsync可以通过任意一个用户和 ssh 密钥连接到服务器然后复制文件。\n首先打开 你自己的电脑 上的 ~/.ssh/id_rsa.pub 获取你自己的公钥（当然你可能用的不是 RSA，自己改），然后复制这个文件，添加到 服务器 里面你要使用的用户（不建议 root 敢死队，你平时的用户就可以了）的 ~/.ssh/authorized_keys 文件里，每个密钥单独粘贴一行。如果你设置过 ssh 免密码登录的话，这一步应该做过了。\n然后打开 Hexo 站点的 _config.yml，修改 deploy 字段，如果没有设置过的话那就改成这样：\n12345678910deploy:\n  type: rsync\n  host: YOUR VPS IP # 你的服务器的 IP 地址\n  user: YOUR USERNAME # 你刚刚复制密钥的那个用户\n  root: YOUR DESTINATION # 你想把文件上传到哪里，比如我的是 `~/stackharbor.alynx.xyz/`\n  port: 22 # 这是 ssh 默认的端口，如果你修改了，这里也要改\n  args: --progress # 额外的 rsync 参数，我这里添加了一个进度条参数，你也可以不设置\n  delete: true # 是否删除旧的文件\n  verbose: true # 是否同步时显示详细状态\n  ignore_errors: false # 忽略错误\n当然很多人可能已经有一个 git 的部署设置了，那也很简单，设置成一个数组就行了，像这样：\n123456789101112131415deploy:\n  - type: git\n    repo: # 像这样设置多个 git 仓库，`名称: 地址,分支`，逗号后面没有空格。\n      github: git@github.com:XXXXXX/XXXXXX.git,branch\n      coding: git@git.coding.net:XXXXXXX/XXXXXXX,coding-pages\n    message: Site updated by Hexo at {{ now('YYYY-MM-DD HH:mm:ss') }}.\n  - type: rsync\n    host: YOUR VPS IP # 你的服务器的 IP 地址\n    user: YOUR USERNAME # 你刚刚复制密钥的那个用户\n    root: YOUR DESTINATION # 你想把文件上传到哪里，比如我的是 `~/stackharbor.alynx.xyz/`\n    port: 22 # 这是 ssh 默认的端口，如果你修改了，这里也要改\n    args: --progress # 额外的 rsync 参数，我这里添加了一个进度条参数，你也可以不设置\n    delete: true # 是否删除旧的文件\n    verbose: true # 是否同步时显示详细状态\n    ignore_errors: false # 忽略错误\n这样就行了，运行 hexo deploy 应该就能看到 rsync 的同步状态了。如果你有其他的不使用 Hexo 的网页，可以用命令：\n1$ rsync -azv --delete SOURCE USERNAME@IPADDRESS:DESTINATION\n\n上传到服务器上，如果有 git 仓库最好用 --exclude=.git 排除掉，顺便 SOURCE 目录一般不要用 / 结尾，原因参见 这里。\n这个时候我还没有把 DNS 从 GitHub Pages 转到我的服务器上，结果生米煮成了熟饭，只能往下继续了。\n用 Let's Encrypt 生成 SSL 证书\nHTTPS 需要有可信机构签发的证书，Let's Encrypt 就是一个免费提供这种服务的网站，不过官方推荐的步骤只能对每个域名单独生成证书，比如 alynx.xyz 和 sh.alynx.xyz 需要两个证书，这里介绍生成通配符证书的办法，比如对 *.alynx.xyz 生成一个证书，可以用在所有三级子域名：\n下载 certbot-auto\ncertbot-auto 是用来验证生成证书的交互命令行工具，似乎一般软件源里的版本都不够高，不能生成通配符证书，这里手动下载新版：\n12$ wget https://dl.eff.org/certbot-auto\n$ chmod +x ./certbot-auto\n手动生成证书\n生成证书的话需要我们手动操作，命令如下（用你的域名替换掉 example.com）：\n1# ./certbot-auto certonly --manual --preferred-challenges=dns --server=https://acme-v02.api.letsencrypt.org/directory -d *.example.com -d example.com\n这里 certonly 表示我们只需要生成证书，我们不需要它帮我们改服务器配置。--manual 表示手动配置参数。生成证书需要你证明域名属于你，由于我们是通配符自然不能一个一个页面去放文件验证（默认的验证方法，类似 Google 的页面验证），所以用 --preferred-challenges=dns 设置为验证 DNS 记录。--server=https://acme-v02.api.letsencrypt.org/directory 表示使用第二版的 api 服务器，默认的第一版是不支持通配符证书的签发的。最后 -d *.example.com -d example.com 添加你的域名，需要注意的是只包含 *.example.com 的证书是不能用在 example.com 上的，所以我们把两个都写上，生成的证书就会同时包含两个域名。\n1234Saving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator manual, Installer None\nEnter email address (used for urgent renewal and security notices) (Enter 'c' to\ncancel): YOUR EMAIL\n这里会让你输入你的邮箱。\n1234567-------------------------------------------------------------------------------\nPlease read the Terms of Service at\nhttps://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must\nagree in order to register with the ACME server at\nhttps://acme-v02.api.letsencrypt.org/directory\n-------------------------------------------------------------------------------\n(A)gree/(C)ancel: A\n这里输入 A 表示同意条款。\n1234567-------------------------------------------------------------------------------\nWould you be willing to share your email address with the Electronic Frontier\nFoundation, a founding partner of the Let's Encrypt project and the non-profit\norganization that develops Certbot? We'd like to send you email about EFF and\nour work to encrypt the web, protect its users and defend digital rights.\n-------------------------------------------------------------------------------\n(Y)es/(N)o: N\n这里问你要不要把邮箱发给 EFF，我不想发就输入了 N。\n12345678910111213Obtaining a new certificate\nPerforming the following challenges:\ndns-01 challenge for alynx.xyz\ndns-01 challenge for alynx.xyz\n\n-------------------------------------------------------------------------------\nNOTE: The IP of this machine will be publicly logged as having requested this\ncertificate. If you're running certbot in manual mode on a machine that is not\nyour server, please ensure you're okay with that.\n\nAre you OK with your IP being logged?\n-------------------------------------------------------------------------------\n(Y)es/(N)o: Y\n这里显示了需要验证的次数，因为我们有两个所以要验证两次，然后为了限制申请次数防止刷证书，这里它会记录你申请证书的 IP，输入 Y。\n123456789-------------------------------------------------------------------------------\nPlease deploy a DNS TXT record under the name\n_acme-challenge.alynx.xyz with the following value:\n\nYX3oQEVGxLolEVtiFDF4JCKe1tqB7B-9pwis8zuQZkc\n\nBefore continuing, verify the record is deployed.\n-------------------------------------------------------------------------------\nPress Enter to Continue\n这里是第一次验证，先别急着回车，去你的 DNS 服务商那里添加一条到 _acme-challenge 的内容为 YX3oQEVGxLolEVtiFDF4JCKe1tqB7B-9pwis8zuQZkc（你的内容不一定和我的一样）的 TXT 记录，然后用 dig -t txt _acme-challenge.example.com @8.8.8.8，检查是否更新完成，最好多查几次，防止缓存导致失败。有消息说国内的 DNS 是访问不到的，我这里用的 CloudFlare。\n12345678910111213141516171819202122232425-------------------------------------------------------------------------------\nPlease deploy a DNS TXT record under the name\n_acme-challenge.alynx.xyz with the following value:\n\nlKuF76a3GRy7y3M-FVDJ3kif0FQJJwZQUROc6cgG_lk\n\nBefore continuing, verify the record is deployed.\n-------------------------------------------------------------------------------\nPress Enter to Continue\nWaiting for verification...\nCleaning up challenges\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/example.com/fullchain.pem\n   Your key file has been saved at:\n   /etc/letsencrypt/live/example.com/privkey.pem\n   Your cert will expire on 2018-09-02. To obtain a new or tweaked\n   version of this certificate in the future, simply run certbot-auto\n   again. To non-interactively renew *all* of your certificates, run\n   \"certbot-auto renew\"\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n又是一次验证，把刚才的记录内容改成新的， 按照评论的指正，这里是可以建立两个同名记录的，所以不需要修改两次，这里可以再添加一条同样名字但内容不同的记录，然后多 dig 几次再回车，如果没通过重新运行命令会从记录 IP 那里开始。\n需要注意 certbot 似乎会很弱智的用 Nginx 服务的目录的名字作为它认为的你的域名，所以最好在开启 Nginx 之前设置它，它每次都把我的域名当成 stackharbor.alynx.xyz 也是把我气个半死。\n设置 Nginx\n这里稍微复杂一点啦，因为我还有另一个页面。\n首先我们要安装 Nginx，我的习惯肯定是安装包管理里面的然后用 systemd 管理，我是 Debian9，你们看着来。\n强制 HTTPS\n首先我们要把所有的 HTTP 请求定向到 HTTPS 上，编辑 /etc/nginx/nginx.conf，在 include /etc/nginx/sites-enabled/*; 前面插入：\n123456# Forward all HTTP requests to HTTPS.\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    return 301 https://$host$request_uri;\n}\n这段表示所有 80 端口的请求都被 301 永久重定向到 https 的网址上面。\n配置虚拟主机\n然后在 /etc/nginx/sites-available/ 下面创建一个文件，名字可以随意，我用的是我的域名，然后编辑它：\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# Forward www domain to non-www domain.\nserver {\n    # Must set ssl with a HTTPS request.\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n\n    ssl_certificate /etc/letsencrypt/live/alynx.xyz/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/alynx.xyz/privkey.pem;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';\n    ssl_prefer_server_ciphers on;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    ssl_trusted_certificate /etc/letsencrypt/live/alynx.xyz/fullchain.pem;\n    add_header Strict-Transport-Security max-age=60;\n\n    server_name www.example.com;\n    return 301 https://example.com$request_uri;\n}\n\nserver {\n    # SSL configuration\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';\n    ssl_prefer_server_ciphers on;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    add_header Strict-Transport-Security max-age=60;\n\n    # Note: You should disable gzip for SSL traffic.\n    # See: https://bugs.debian.org/773332\n    #\n    # Read up on ssl_ciphers to ensure a secure configuration.\n    # See: https://bugs.debian.org/765782\n\n    root /home/example/example.com/;\n\n    # Add index.php to the list if you are using PHP\n    index index.html index.htm index.nginx-debian.html;\n    error_page 404 404.html;\n    server_name example.com;\n\n    location / {\n        # First attempt to serve request as file, then\n        # as directory, then fall back to displaying a 404.\n        try_files $uri $uri/ =404;\n    }\n}\n首先你看到的 ssl 那一大片都是用来加密的，总之你需要把 example.com 换成你的域名（因为 certbot 生成的证书所在的目录是域名的名字）。然后这里第一个 server 的作用是把 www.example.com 重定向到 example.com（因为 80 （HTTP）已经被强制转到 443 （HTTPS）了所以一定要写 443 和 ssl 的配置），如果你想反过来，那就把 return 那一句加上 www. 然后把上下两块的 server_name 那一行对调。\nroot 选项设置成你要作为网页目录的路径，比如之前你 Hexo 上传到了家目录下的子目录这里要对应。\n接下来创建密钥，Nginx 默认的编码长度太弱，使用 2048 位的：\n1# openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n然后创建软连接使配置生效，并重启 Nginx：\n12# ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/\n# systemctl restart nginx\n如果你还有其他的页面，放在另一个目录里，然后再创建一份配置文件，当然这次只要有第二个 server 字段就好了，修改路径，然后连接重启。\n自动更新证书\n安全起见，Let's Encrypt 签发的证书只有 90 天有效期，官方推荐使用自动定期刷新的方式更新证书，只需要建立一个定时任务运行 /PATH/TO/certbot-auto renew --pre-hook \"systemctl stop nginx\" --post-hook \"systemctl start nginx\"（如果你用的不是 systemd 管理 Nginx 记得换成其它的停止和启动 Nginx 的命令）。很大可能你知道怎么用 crontab 做这件事情，但我使用 systemd-timer 做。\n首先建立 /lib/systemd/system/certbot-renew.service 这个文件，内容如下：\n123456[Unit]\nDescription=Updates cert file via certbot\n\n[Service]\nType=oneshot\nExecStart=/home/alynx/certbot-auto renew --pre-hook \"systemctl stop nginx\" --post-hook \"systemctl start nginx\"\n然后建立对应的 timer /lib/systemd/system/certbot-renew.timer，内容如下：\n12345678910[Unit]\nDescription=Updates cert files via certbot every week\n\n[Timer]\nOnBootSec=1min\nOnUnitActiveSec=1week\nUnit=certbot-renew.service\n\n[Install]\nWantedBy=multi-user.target\n这个 timer 会在启动 1 分钟之后运行 certbot-renew.service，同时每周运行一次来确保你的证书会被刷新。\n启动它：\n1# systemctl enable certbot-renew.timer --now\n然后更新你的 DNS 的 A 记录和 AAAA 记录，生效就可以了。\n有备无患咯！\n更新：我的 VPS 被墙了，算了，噗。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"无尽的咏叹回荡于伽蓝之世界中 —— 有关 ARIA","url":"/posts/Endless-ARIA/","content":"大约从我写好 ARIA （指把我自己的网站换成它做主题）到现在为止已经有一个月了，这一个月里它有了 20 个 Star、4 个 Issue 和 128 个 Commit（都是我自己，残念啊）。大概算是我现在最得意的项目，当然不排除以后也是。\n虽然这么说有点敷衍，但是我是和一些无聊的人进行了一点无谓的争执 —— 我讨厌辩论，所以尽可能把这种冲动压制在一点 —— 所以我现在来写这篇文章，聊聊那些代码里面没有告诉你的事情。写点经过脑子的思考总是有用处的，不仅是对自己而言。\n\n\n我已经不太记得当初自己选择 Hexo 的理由了，大概是因为 2016 年的时候比较热门的静态博客生成器就是 Jekyll、Octopress 和 Hexo 吧。我不太注意 Pelican 是什么时候出现的，至于 Hugo，没记错的话 Hexo 冲上 staticgen 前三的时候，Go 语言还是个尝鲜的状态，然后才有了 Hugo。那时候大概还没有 React.js，所以也就没有 Gatesby。\nHexo 当初打出的招牌就是它比 Jekyll 和 Octopress 快，当然现在 Octopress 已经式微了，Jekyll 作为 GitHub 钦定的生成器还是好好的。选择了 Hexo 才发现相比其他生成器，Tommy351 是台湾人这一点让它有更好的中文文档支持 —— 对一个新手来说还是很重要的。习惯了之后就没有必要换另一个的代价，何况它们并没有太大的吸引力。我对 Go 并不是很感兴趣，Hugo 的“第一快”和 Hexo 的“飞快”比起来也并不是一个充足的理由。至于 Gatesby —— 我还要学 React，然后 AJAX 获取数据更新页面然后突然换掉地址栏地址这种行为单纯的觉得不舒服。\n所以 Hexo 看起来完全够用，还要算上各种奇怪的插件，不同的模板和预处理器，另外我是因为 Hexo 才对 Node.js 产生好感的。\n那为什么要自己写一个主题呢，一部分的原因是已经用腻了 NexT，老实说我不是很喜欢这个名字，很想问问作者是不是在看了乔布斯传里面的 NeXT 才想了这么一个名字。它让我想起一个观点叫做“第一个把女人比作花的是天才，第二个把女人比作花的是庸材，第三个把女人比作花的是蠢材”，感谢语文老师。\n不过说到底起什么名字是人家的自由，也不能不说它是个不错的主题。然而人是一种不做点什么就不好感知自己存在的生物，因此做这个项目除了因为 NexT 几个 Scheme 和遗留代码混在一起让我觉得难以掌握，以及 Swig 已经被废弃了但这个主题却很难迁移的强迫症之外，还有“我做是为了证明我能做”的念头，最后就是深层次的“让痛苦来证明我还活着”（黑执事 1 的结尾？）。\n虽说如此，我一直没有足够的动力来写，最后只能是碌碌无为地做一些其他的事情。\n直到听说 Kalafina 要解散的时候，我觉得自己应该给她们做点什么，虽然自己好像什么也做不到，但是给自己的主题起个名字总是可以的吧。那张红色封面的 ARIA 是我至今听过的最出色的 LIVE，甚至超出录音室的版本。\n在写 ARIA 的时候我给自己定了几个目标，比如说我实在是受不了许多主题高喊着一个比一个简洁然后却很丑的状况（这个观点也是在别人那里看到的，一群人自以为是简洁，实际是简陋），所以就算做的复杂一点（并没有这个能力）也要让它看起来优雅（emm 如果大家觉得现在的样子符合这个标准的话）；再比如我也不想编辑一份超过 500 行的配置文件，在一大堆应该保持默认值的选项里找几个人人都想改的选项实在是太愚蠢了（“你为什么非要过那 1% 的生活？”）（前面只是玩梗），如果大家都这样设置，那就写死到代码里好了，如果人人都想改成另一种选项，那应该把那种设置成默认值；最后就是如果可能的话尽量不要用 position: fixed; 或者 position: absolute; 还有 position: float; 这种属性，即使用一些比较新的 CSS 属性（IE 10 以下的不配看我的网站！），因为它们对我来说太不直观又难以驾驭了。\n然后就是选择模板和预处理器了，ejs 这种又挫又丑的东西我是不会去用的，然后看起来 Hexo 的 Nunjucks 插件还算能用（当然并不好用，都没人更新了还占着最好的名字，于是我只能自己写了一个，这是后话），唯一对 Nunjucks 不满的地方大概是它的关键字是 Python 风格（我讨厌这两种叫做 Python 的语言）。CSS 预处理器看起来在 Sass 和 Less 之间有个更好的选择叫做 Stylus（也是 Node 社区比较喜欢用的），既然这次是自己写样式了，纠结了好久我还是没有添加 Bootstrap。\n参照的原型是 hexo-theme-hueman，我很喜欢它的风格，但是看起来 ppoffice 维护了好几个主题，但是哪个都不是很精细好用，当然随着我的设计进行 ARIA 和 Hueman 产生了不一样的设计，我比较喜欢现在的样子。\n在艰难地摸掉了 Hexo、hexo-renderer-nunjucks（就是这个坑货不更新还占着好名字） 和 Stylus 的一些坑之后，开始正式的进入到编写阶段，果然对于我而言 CSS 才是最难驾驭的语言，不过还是顶着各种困难把它做成了我想要的样子（优秀的前端工程师想要什么样就做成什么样，我是做成什么样就算什么样），其中的经历不太想多说，比如 Hexo 的中文文档没有告诉我 page.posts 是个什么类型（不是 Array，ejs （就是嵌入的 JavaScript）可以迭代，但是 Nunjucks 却不行），英文文档又出现了 Array of ???，请问 ??? 是什么？点击链接又跳转到了 Hexo 的一个叫做 Warehouse 的子项目，这又是什么？后来终于我在 Issue 列表里找到了答案，这是个数据库，为了能让 Nunjucks 和 Swig 迭代，作者又添加了个 toArray() 方法。再比如 hexo-renderer-nunjucks 的版本卡在 Nunjucks 2，我又自己写了个插件支持 Nunjucks 3。还有自己差不多完全重写了一个用来搜索的 js。好在最后是做出来了。\n比起做加法，做减法看起来更难一点，首先由于翻转的 CSS 动画莫名的消耗了 chrome 的性能，让我把它改成了可选项。然后觉得按钮鼠标覆盖转两圈太花哨了，改成了阴影。然后踢掉了不必要的自定义不蒜子字符串的设置项。最后怎么看那个灰色的“阅读原文”按钮怎么觉得它和风格不搭，同时又和文章标题功能重复，终于下决心把它删掉了。大约是一边狂奔一边丢掉所有东西的人生的剪短缩影。\n这就是你现在看到的它的样子，没有什么文章头图这种设计，纯粹是因为这个写起来太不直观，文章的核心始终是在文字内容上，为什么非要花时间去找一张图片搭配给它做头图呢？比起这个，各种链接的变色的细节才是我想要的。说到底，还是为了在这个世界里留下一点自己独特（固执）的存在。\n如果说还有什么要加进去的话，短期内是自定义字体的设计，现在的字体顺序是我最喜欢的字体排在最前面，但看起来似乎大家有不一样的喜好。\n请务必记住我对这个世界无尽的咏叹，记住这个在深夜里写一点话的孤独的灵魂。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"GitHub Pages 自定义域名启用 HTTPS（非 CloudFlare）","url":"/posts/Custom-GitHub-Pages-Domain-with-HTTPS/","content":"在 GitHub Pages 支持自定义域名开启 HTTPS 之前，我是使用 CloudFlare 的 CDN 中转来启用 HTTPS 的，缺点也很明显，就是面对国内访问的时候 CloudFlare 的 CDN 简直是逆加速，还不如直连 GitHub 的速度呢。\nGitHub 在 2016 年开启了 *.github.io 域名的 HTTPS 访问，在今年的 5 月 1 日，终于开启了对自定义域名的 HTTPS 支持。这篇文章将会介绍一下开启的办法和中间容易踩的坑。\n\n\n有关为什么要启用 HTTPS 就不多说了，HTTPS 会对传输的内容进行加密，最常见的就是防止无良运营商拦截你的流量添加广告了，也能防止用户接触被劫持的页面而上当受骗，同时不会对浏览造成什么太大的代价。\n按照 GitHub 给出的说明，似乎我什么都不做就能开启 HTTPS 了，仔细尝试了却发现不是这样。\n首先如果你开启了 CloudFlare 的 CDN 和 HTTPS，建议把它们关闭。CloudFlare 的 HTTPS 加密在 Crypto 面板里，找到第一项 SSL，设置成 Off，然后如果你在 Page Rules 里面添加了 Always HTTPS 之类的选项，可以删除，因为我们可以用 GitHub 提供的 Enforce HTTPS 选项进行跳转。然后去到 DNS 面板，看到那几朵红色的云朵了吗？它们代表访问时候会首先使用 CloudFlare 的 CDN，考虑到受众，这里可以点击让它变成灰色的 DNS Only，从而加快访问速度……\n然后如果你是设置 A 记录来跳转到 GitHub Pages 的话，需要修改成新的 IP 地址，GitHub 提供了下面四个 IP，不过我是比较喜欢设置 CNAME 啦：\n\n185.199.108.153\n\n185.199.109.153\n\n185.199.110.153\n\n185.199.111.153\n\n\n如果是 CNAME 的记录就简单啦（虽然 GitHub 文档里推荐的是 ALIAS 或者 ANAME 不过大部分的 DNS 都只有 CNAME 吧），保持你之前 你的用户名.github.io 的模式就行啦，比如我是 AlynxZhou.github.io。\n由于 DNS 多级缓存的存在，DNS 有关的设置需要一定时间来生效，最长大概需要 24 小时，不过一般都是很快的。\n然后我们需要去到你开启 Pages 服务的仓库，点击 Settings 面板往下拉，找到 GitHub Pages 一节的 Custom Domain 选项。重点在这里啦！如果你什么都不做，会发现下面 Enforce HTTPS 的选项是灰色的，边上可能还写着说您使用了自定义域名不能开启，难道是虚假宣传？实际上你需要 先去掉你的自定义域名，然后再添加回来，这里才能开启，至于你问我为什么，我也不知道。\n所以首先我们把这个框里面的自定义域名删掉，然后 save，然后可以访问一下 https://你的用户名.github.io/（如果这不是用户主页的话后面要加上仓库名字）测试一下。然后回来再次添加自定义域名，保存。 应该可以发现 Enforce HTTPS 边上的小字变成了 正在处理您的 HTTPS 加密证书（大意），因为这个是 GitHub 和 Let's Encrypt 这个授权验证机构合作推出的服务，证书需要进行处理，大概一小时之内就可以完成，然后这次访问 https://你的自定义域名/，地址栏里应该就会出现小锁头，表示已经加密，就可以放心的勾选 Enforce HTTPS 啦！\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"写给新手的 Linux 手册 1","url":"/posts/Linux-Manual-for-Newbies-1/","content":"恰如字面意思，这是一篇写给新人的 Linux 指南，当然，不要指望从我这里得到什么详细的配置教程，最起码我没有打算在这篇文章里把你能遇到的 Linux 配置情况全部说清楚。我想在这篇文章里讲述的是一种理解方法或者说是一种 Linux 思维，换个更简单的说法是——它能在 Linux 向你吐出一堆牢骚的时候明白它在说什么，以及一个有经验的 Linux 用户这个时候会做什么，有经验的 Linux 用户是如何学习他们没有接触过的 Linux 知识的。\n准备好了，就继续吧。\n\n\n开宗明义（开篇劝退）\n本页面不适用于如下类型人员：\n\n脑残微软粉丝\n如果你觉得微软爸爸什么都是好的或者你已经完全被微软圈养，现在关闭还来得及，微软不会让你在 Linux 下运行 VS 或者 Office 的，没必要找不痛快。\n\n认为电脑应该听我的，或者说稍微有一点不一样就觉得是 Linux 的问题的人\n我不想多说什么，如果你觉得程序员改一下按钮的样式你就不会用想骂人的话，我不想认识这样的蠢货。工具是听从你的命令去帮你解决问题的，如果它工作了，你应该感激它，如果出错了，很大程度上是你给的指令有问题。\n\n强行用 Windows 思维去使用 Linux 的人\n你不能强行用一把十字花的螺丝刀去拧一字的螺丝对吧。使用 Linux 就要有 Linux 的思维，当然用你熟悉的东西去类比是可以的，事实上我经常这么做，但是在遇到不一样的时候应该以现实情况为准，否则同第二条。\n\n没事闲的/听说这东西很少人用/打算用这玩意装X的\n如果你抱着这样的想法我劝你把这种精力放在打游戏上去，很显然你的学习动力是不长久的并且很容易演化成第二种。或者觉得这东西没有达到你想要的装X效果然后再装模作样的黑一通假装自己多么了不起——趁早滚开，Linux 用户们不是觉得 Linux 不能被批评，但前提是被批评的部分确实不好用。\n\n\n因此本手册适合于那些确实有实际需求——Linux 从被创造出来就是一个务实的项目——并且能够接受新事物的新手，如果你确实想要了解这个系统的方方面面，必读的读物是鸟哥的 Linux 私房菜，虽然它看起来很厚，但是语言风趣，读下去不是很困难。\n我该选择什么版本的 Linux？\n和你常见的桌面操作系统不一样，Linux 本身不是一个操作系统——它只是一个操作系统内核，可以操作计算机硬件资源。我们通常把基于 Linux 内核的，由内核和其他常见的一系列软件组成的操作系统也叫做 Linux。因为大部分的组件和内核一样都是开放源代码软件，所以任何有能力的人都可以组织他们自己的操作系统，这被称为 Linux 发行版。不同发行版之间可能存在着配置上的些微差异或者用等价的软件替换掉另一部分软件，当然，它们之间大体上是相似的，学到的知识也都通用。\n如果你需要从头选择一个发行版，选择的条件有以下几个：\n\n尽量选择最新的版本，或者支持期较长的版本中的最新版本。\n过于老旧的版本通常已经失去维护，继续向下看你会发现这是很恐怖的事情。\n\n尽量选择用户比较多的发行版本。\n使用的人数越多，代表你出现问题时可能寻找到解决方案的机率也越大。\n\n尽量选择你更熟悉的发行版。\n这个不用多说了吧。\n\n\n如果你打算在自己的电脑上使用 Linux，推荐的版本有 Ubuntu，LinuxMint，Fedora，openSUSE。\n如果你打算在远程服务器上使用 Linux，推荐的版本有 Debian，Ubuntu Server, CentOS。\n特别需要注意的是 Ubuntu 16.04 之前的版本，Debian 8 之前的版本，CentOS 7 之前的版本由于时间过久，不建议现在选择，同时有些网站使用的是这些系统的开发代号而不是版本号，可自行搜索对照。如果你需要接手一台比较旧的服务器，请自己上网搜索或者参阅鸟哥网站，本手册不加讲解。\nArch Linux 或者 Gentoo Linux 一类需要使用者有较强能力的高定制性发行版不建议新人使用，如果你对自己的学习能力有信心，希望随时使用最新版本的软件，并且能够判断互联网上的消息有效期，可以考虑使用 Arch Linux，但是请务必多阅读 Arch Wiki。\n以上安装镜像的唯一可靠下载渠道为官方网站（已给出）或者官方指定的镜像站，请务必不要在来历不明的位置下载。\n我该怎样连接到我的服务器？SSH 又是什么？\n有关 SSH 的介绍来自维基百科：\n\nSecure Shell（安全外壳协议，简称 SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH 通过在网络中创建安全隧道来实现 SSH 客户端与服务器之间的连接。虽然任何网络服务都可以通过 SSH 实现安全传输，SSH 最常见的用途是远程登录系统，人们通常利用 SSH 来传输命令行界面和远程执行命令。使用频率最高的场合类 Unix 系统，但是 Windows 操作系统也能有限度地使用 SSH。2015 年，微软宣布将在未来的操作系统中提供原生 SSH 协议支持。\n在设计上，SSH 是 Telnet 和非安全 shell 的替代品。Telnet 和 Berkeley rlogin、rsh、rexec等协议采用明文传输，使用不可靠的密码，容易遭到监听、嗅探和中间人攻击。SSH 旨在保证非安全网络环境（例如互联网）中信息加密完整可靠。\n\n简单说的话，SSH 是一个协议，在操作系统上有对应的实现软件，用来在你和服务器之间传递消息，SSH 也是 UNIX 世界里最常用的远程控制协议，如果你对命令行界面有所了解，SSH 实际上是把远程 Shell 的输出传送给你，然后把你的输入传递给远程 Shell（在这里传递命令行的原因是网络通常不足以满足传递图形界面的带宽，字符更节省数据流量）。\n需要注意的一点是 SSH 界面的回显是由远程计算机控制的，也就是说只有远程端收到了你的输入并返回给你确认信号之后你的屏幕上才会出现输入，这种设计避免了由于网络延迟带来的输入混乱，但也因此在网络不好的时候会产生延迟，不要认为是你的计算机卡住了。\nSSH 分为两个部分，客户端程序 ssh 和服务端程序 sshd，同样地在 Linux 下面也有两个配置文件 /etc/ssh/ssh_config 和 /etc/ssh/sshd_config，一般情况下不需要修改客户端的配置，你需要修改的是 服务器端 的 /etc/ssh/sshd_config。同时服务器端需要将 sshd 作为一个 daemon （守护进程，可以理解为 Windows 里面的服务，在特定的时候由操作系统启动并完成一定工作的程序）启动于后台。在较新的 Linux 发行版中统一使用 Systemd 作为启动管理程序，使用下面的命令将 sshd 添加到开机启动列表并现在启动它：\n1# systemctl enable sshd --now\n# 是 Shell 提示符，不要复制它，不理解往后看。\n通常情况下你不需要修改 sshd 的配置，默认 sshd 会监听 22 号端口，如果你知道主机名称和主机上一个账户的名字/密码，就可以在客户机上运行：\n1$ ssh username@hostname\n连接到远程主机。hostname可以是域名或者 IP 地址。\n最常见的配置更改是改变 sshd 监听的端口，需要你修改 /etc/ssh/sshd_config，找到 #Port 22 这一行，删除掉前面的 # 以取消注释，然后修改 22 为你想要的值（端口范围为 0 - 65535，需要注意的是一些常见端口已经有使用比如 80 是 http 服务的端口，如果你的服务器上有这些服务运行记得避开）。之后用 systemctl restart sshd 重启 sshd 服务。如果你要连接到一个不是使用 22 端口的 sshd，使用 ssh -p xxx username@hostname，xxx 是你服务器的端口号。\nssh 还带有一个叫做 sftp 的客户端程序，可以在本机和远程之间传递文件，具体用法请自行搜索。\nShell 和终端都是什么？为什么我输入密码没有反应？\nShell 是一个程序（废话），它接受用户的指令并传递给内核，以便完成交互，常见的 Shell 有多种，互相之间基本兼容，通常指的是文字界面的 Shell，用户通过 Shell 执行各种其他程序。\nLinux 是可以没有图形界面的（与 Windows 不同），没有桌面环境的情况下 Linux 会提供叫做 tty 的字符界面，但是字符界面毕竟功能有限（只能显示英文数字，不能显示中文等复杂字符），所以我们常用桌面环境下叫做终端模拟器的程序开启一个在图形环境下的字符界面模拟器来执行各种操作，这个程序简称终端 Terminal。之所以使用字符界面的原因是图形环境通常为了做到简单易用而限制了其功能，Shell 操作相对稳定高效并且能做到各种复杂的操作，并且在服务器上没有必要开启图形界面浪费资源，所以使用 Linux 务必要掌握 Shell 的用法。\n最常见的 Shell 叫做 bash，一般交互方式是这样的：\n1username@hostname currentdir $ command --args filename\nusername@hostname currentdir $ 是提示符，每次出现它就代表现在掌握权回到了 Shell 上，你可以输入指令了，其中 currentdir 表示了你当前的路径，$ 在有些 Shell 里会显示为 %，但是当它是 # 的时候说明你现在不是一般用户而是 root 用户，需要注意的是这个提示符是可以改变样式的。\n在 Linux 下你可以直接在提示符后面输入指令来进行操作，通常第一个位置是指令名称，比如 cp 代表复制，第二个位置是参数，一般以 - 开头，比如 -R 表示递归地复制子目录和目录里的文件，多个参数可以合并写比如 -Ri, 最后一般会接操作的文件名，对于复制来说，第一个是被复制的文件的路径，第二个是复制到的目的地，如果是文件表示复制过后改成这个名字，如果是目录就是将这个文件复制到那个目录下。各个部分之间用空白符分割比如空格或者 Tab，对于 Shell 而言连续的空白符会被识别为一个，如果文件名里有空格，用反斜杠转义。\n常见的命令有很多，但是要介绍的是 man 这个指令，如果你不知道一个命令的用法，只需要运行 man 指令名 就可以获取到内置的帮助文件。\npwd 输出当前所在的路径。ls 指令列出目录下的文件（如果不指定目录则列出当前目录），常见的用法是 ls -alh，表示列出隐藏文件（-a），显示文件权限、所有者等详细信息（-l），将文件大小显示为人类易读格式（-h）。mv 移动文件，用法类似 cp（Linux 下没有重命名命令，将一个文件移动到另一个名字即为重命名）。rm 删除文件，要注意这个命令没有二次确认，同时 -rf 参数表示递归强制删除，慎用！\ncat 输出一个文件的内容，当然这个文件最好是纯文本（和 猫 没有关系！），less 也会输出文件内容，但是它增加了翻页功能（cat 是一股脑倒出来，less 则是让你一页一页看）。\n当你运行一个程序的时候，Shell 需要获取到这个文件的位置，Shell 有一个 $PATH 变量，当你只输入一个程序的名字而不是完整路径时，Shell 会逐个搜索 $PATH 的目录，这些目录大部分是系统存放可执行程序的位置。同时注意当前目录不在这个变量里，你可以使用相对路径（. 表示当前目录，.. 表示上一层目录，~ 表示家目录（这个只有 Shell 支持））如 ./a.out 运行当前目录下的文件，当然你也可以使用从根目录开始的绝对路径。\n有些程序可能需要在后台运行，但是用 Shell 启动的程序一般在父进程也就是 Shell 退出的时候就会结束。对于有些没有提供以 daemon 方式运行的程序，可以尝试 screen 或者是 tmux 这一类终端复用器，他们可以保存 Shell 会话到后台，具体用法请自行搜索。\nUNIX 哲学里面，如果一个程序不是以输出信息为目的或者需要显示进度信息，那么 “没有消息就是最好的消息”，没有输出是成功的，有输出一般是报错，复制粘贴谷歌一下。\n最后有关不显示密码的问题，Linux Shell 下输入密码就是不显示的！！！不会显示星号或者圆点！！！这样可以保证安全。\n我该如何编辑文件？怎样安装我需要的软件？\n首先我在这里不会介绍 vim，不仅仅是因为我是 emacs 用户，而是因为 vim 对于新人而言实在是太难以学习了（除非你想让新手产生一串随机字符串（“Q：如何产生一串随机字符串？A：让新手退出 vim”））。新人一般是没有接触过模式化编辑器的。如果你需要编辑配置文件，使用 nano 这个程序就好了，nano filename 编辑文件就像记事本一样简单，同时它的快捷键都会列在屏幕下方。\n有关安装软件，请把 Windows 安装包有关的思维全部忘掉。Linux 的软件包管理方式大概可以类比为应用商店，由于大部分的软件都是开源的，每个发行版都会维护自己的一个软件仓库，使用包管理程序就可以自动下载并安装到统一位置，安装的位置都是维护者写好的，并且在数据库里有所记录，所以不需要担心卸载的时候有残留（至于什么软件安装到系统盘会影响速度的说法更是无稽之谈）。也不太需要担心软件占用过多空间，Linux 下有良好的库共享机制，所以一般软件的体积远小于 Windows（由于 Windows 缺乏有效的包管理机制，开发者一般会将所有的依赖库打包到程序安装包，造成空间浪费）。\nLinux 下的包管理主要有两种常见软件，Debian、Ubuntu、LinuxMint 使用 Debian 的 dpkg 和 apt-get，CentOS、Fedora、openSUSE 使用 RedHat 的 rpm 和 yum，具体使用方法请自行搜索，简单用法比如安装 nginx 使用 apt-get install nginx 或者 yum install nginx，便会自动从镜像站下载安装（镜像站是为了加快下载速度在全球各地建立的软件仓库的克隆）。\n如果你需要一个软件，首先检查软件源里是否已经有这个软件，版本是否符合要求（有些发行版为了维持稳定，不会在软件源里使用最新版软件），如果没有，搜索你所使用的发行版是否有常见的第三方源包含这些软件。请把在官网下载的安装包作为最后选项使用，因为这些下载的安装包不会被包管理所管理，需要自行删除及检查残留，相比起来包管理是自动化并且可靠的。\n如果你使用一个停止维护的发行版本，通常软件源已经无人维护，也就是说没人可以保证你使用的软件是安全的（甚至可能是无法使用的）。另外有关系统升级，Linux 升级的主动权掌握在你的手里（没有被 Windows 强制更新 然后 更新失败 然后 回滚 然后 回滚失败 所支配的恐惧了哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈这世界上还有什么东西比微软的更新更不靠谱的吗），并且你可以随时打断更新流程（在不影响系统的情况下）（除了内核及相关部分更新，大部份的安装操作 不需要重新启动）（服务器很少重启）。另外如果不是新版本软件有什么必须的功能，最好不要 更新服务器上的软件。如果你习惯了一个还在维护中的不是最新的软件，Linux 和开发者不会强迫你为了新功能而更新，因为这些新功能你可能不会用到，还可能影响到系统稳定性，当然，如果有安全更新比如修复了漏洞一类的最好更新一下。\nroot 是谁？权限是什么？为什么没有 CDDEFG 盘？\n简而言之，root 是一个 UID（User ID）为 0 的特殊用户，一般用于系统管理操作，它可以操作系统的任何部分即使这些部分不是属于它的（你的我的都是我的）。因此我们不建议在日常操作中使用 root，并且需要给 root 设置复杂的密码。否则一旦入侵者掌握了 root，你的机器就变成了他的。日常使用 root 则很容易对系统造成损坏（系统不控制 root 的行为）。平时我们使用自己的用户，需要进行高权限操作比如安装软件（Linux 下安装软件是全局的也就是说你要修改不属于自己的部分）时使用 sudo 命令，sudo 会以 root 权限运行后面的命令，同时要求你输入自己的密码。但是只有列在 sudoers 文件里面的用户可以使用 sudo，具体的用法阅读 这里。\n权限则是用来管理用户对于文件的操作的。使用 ls -alh 的时候可以看到第一列都是文件的权限，一般看起来像是 -rwxr-xr-x，每一位是一个信息，内容如下：\n\n第一位表示的是文件类型，- 表示这是一个普通文件，l 表示这是一个连接文件（link），d 表示这是一个目录（dir）。\n\n第二到四位是文件所有者对于文件的权限（ls -l 的第三列是文件所有者），r 表示可以读，w 表示可以写，x 表示这个文件是可以运行的（当然能不能运行还要看文件内容，比如图片当然不能执行了）。如果没有某项权限，该位置为 -。\n\n第五到八位是文件所属用户组对于文件的权限，含义同上。\n\n最后三位是既不是所有者也不属于该用户组内的其他用户对于文件的权限。\n\n\n如果你需要修改一个文件的权限（前提是你对这个文件有写权限），使用 chmod num file，其中 num 对应原则如下：\n\nr =&gt; 4，w =&gt; 2, x =&gt; 1\n\n每一组加起来获得一个和，第一位不考虑，例如 -rwxr-xr-x 除去第一位，换算成 755。\n\n\n如果想递归改变一个目录，使用选项 -R。\n任何情况下 不要 将文件权限设置为 777 虽然你可能看到网络上有些不会用 Linux 的蠢货为了方便这样做，这意味着任何人都有权限修改这个文件，一旦入侵者在其中加入恶意代码，而你使用 root 执行了它，那么恶意代码就有了 root 权限，可以破坏或窃取任何数据。\n有关目录结构：Linux 使用目录树组织目录结构，与 Windows 不同，如果你需要访问一个设备上的文件，你需要把设备挂载到某个目录（相当于把设备自己的树枝接到总树上的某一枝干上，当然接到哪里不一定是固定的），Linux 下有一些约定的结构，通常我们把 /（根目录）放在一个分区上（其他目录都是接在根目录下面），然后把 /home 放在另一个分区里（通常储存了用户们自己的文件），这样一旦需要重新安装，只需要清空根目录所在分区，保留用户数据文件（同时把自己的文件不放在自己的家目录也是不明智的）。更多复杂的解释参见 这里 和 这里。\n如何管理系统？\n现在的发行版通常使用 Systemd 作为启动后的第一个进程，并且由它后台管理启动项，因此如果你使用的是我所列出的较新发行版本，一旦上网搜索到的说明让你使用 rc.local、/etc/init.d/xxx start，直接关掉，他们过时了。\n一般你所需的开机启动的程序比如 http 服务器 nginx，在打包的时候都会有一个 service 文件供 Systemd 使用，Systemd 主要通过 systemctl 这个指令来控制，常见用法如下：\n\nsystemctl enable nginx 表示将 nginx.service 添加到启动列表里（.service 可以省略），如果想同时立刻启动它，在后面附加参数 --now。\n\nsystemctl start nginx 表示立即启动 nginx（并不影响系统重启后的操作。）（这里的启动是指由 Systemd 管理，并不是 Shell，可以理解为后台服务）。\n\nsystemctl stop nginx 立即停止 nginx。\n\nsystemctl disable nginx 将 nginx 从开机启动列表里去除，也即下一次启动系统时不启动它。加上 --now 可以同时停止它。\n\nsystemctl status nginx 查看 nginx 当前的运行状态信息。\n\n\n如果要阅读日志，使用 journalctl 命令。更多详细介绍参见 这里。\n提问的艺术\nLinux 开发者们一般都是凭借兴趣和对写程序的热情进行开发的，或者说他们不像微软和苹果的员工拿了你的钱替你解决问题，唯一让他们解决问题的动力就是写出完美的程序。因此一旦你发现了问题求助于他们，请注意你的语气，这里没有人亏欠你什么，最好进行建设性的发言，并且给出足够的信息，方便其他人帮你解决。如果一上来就吐槽但是问题却是你自己的话，做好挨骂的心理准备。\n最后，有关 “世界上最好的两种语言” Python……\n所有使用 Python 却不指明具体版本的人都是耍流氓！\n\n由于 Python2 和 Python3 语法任性的不兼容，而有些发行版默认的 python 链接到 python3 有些还抱着 python2，建议在运行有关指令时使用具体的 python2 或者 python3 而不是 python。同样，使用 pip（Python 的包管理器，安装 Python 一些库的时候尽量用这个）的时候也要指定 pip2 或者 pip3（Python 两个版本有不同的目录，装错了没人管你）。\n不要修改系统默认的 Python 版本，除非你想让用 Python 编写的系统软件崩溃！\n虽然我是不建议使用 Python2 这个即将停止支持的语言，但是只要你编写的时候加上文件头：\n1#!/usr/bin/env python2\n就不会造成太大问题（Python3 用户把 python2 换成 python3）。\n最后，Linux 下的文件请一律使用 无 BOM 的 UTF-8 编码（自己查这是什么！）。\n不懂的一定要多搜索！搜索引擎（谷歌，必应）是好工具，不搜索永远也学不会。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"Kalafina, My Music Life","url":"/posts/Kalafina-My-Music-Life/","content":"美好的东西总是在结束的时候才更显珍贵。\n\n\n满天\n满天思念化作繁星\n\n我想不是所有人都能理解我此刻的心情。消息来的很突然，但是却不出乎意料。\n从梶浦由纪退出事务所的时候，大家就知道会发生这样的事情了吧。\n可是我还没有去听过一场 Kalafina 的演唱会现场。\n明明想好了即使其他歌手的演唱会都不去，K 团的现场也要去。\nKalafina 不只是一个演唱动漫音乐的歌手组合，在我心里歌曲和音乐始终是有分别的，因为当我把 Kalafina 划分进音乐的时候，其他的无论怎样，都只能是歌曲了。\n\nTo The Beginning\n奇迹还会最后降临一次吧\n\n梶浦由纪退出事务所的时候，我觉得自己的半个世界崩塌了。\n当然梶浦还是能继续作曲的，可是 K 团怎么办呢。Twitter 下面已经有粉丝评论“我不会听没有梶浦先生的 Kalafina 歌曲”。\n说到底，Kalafina 成立开始就是由梶浦由纪负责的，选拔歌手也好作词作曲也好。\n梶浦由纪是伟大的音乐家，Kalafina 则是有完美的和声和演唱能力。\n梶浦和 K 团就是天作之合。\n在我没有看过 Fate 的时候就这么认为，看了 Fate 以后更加坚定。\n\nARIA\n没有你的未来 此刻刚刚开始\n\n我曾经一度失望。\n我以为没有歌手能够把 LIVE 做到和 CD 一样好。\n这很难吗？或者说难道不应该吗？\n一个乐器演奏者永远不懂，我从来不相信演奏者会把自己演奏需要修饰这一点暴露出来，如果现场演奏，就是做到最好，或者和录音一样。\n可是我听了一些在 CD 中有完美音色的歌手的 LIVE 之后放弃了。\n有些没有修正的版本连音调都是不准的，有些虽然准了或者修准了，但是其感情表达远远不能和 CD 相比。\n也许本来如此吧，也许在现场控制自己的嗓子是很困难的事情吧。我这样欺骗自己。\n直到我重新发现 Kalafina。\n如果你也如此绝望，我希望你去听现场版的 ARIA。\n最好的版本是在 5th Anniversary LIVE SELECTION 2009-2012 这张专辑里，LIVE 中夹杂的情感粒度，细节的强弱音色，甚至超过了原版的听感，原版的感情太柔和了，LIVE 淋漓尽致的表现了黑暗中的抗争感。当然 Kalafina LIVE THE BEST 2015 \"Red Day\" 是另一个让人震撼的版本，虽然这个版本 Hikaru 是感冒嗓子沙哑的时候，但是她对声音的控制已经让人觉得惊艳了，甚至说可以超过其他我听过的 LIVE 的一般水平。\n顺便说一下，Kalafina 最开始的时候只有两个人，Wakana 和 Keiko，Hikaru 是后来在参选者中选出来的，Maya 短暂的加入之后就单飞了，在 ARIA 原版发布的时候是四个人的版本，LIVE 的时候只有三个。\n三个人的版本能够超越四个人的版本，并且让我惊讶的是 Hikaru 对感情的表达，彻底让我爱上了这首歌，即使这些部分原本大概不是她的。\n我大概知道为什么梶浦由纪会把她从三万名参选者中选出来了。\n\n君が光に変えて行く\n为了这份渺茫的信念 你将化作光芒将它们照亮\n\n在我爱上 Kalafina 的时候，我是没有看过空之境界的，也没有看过 Fate。\n那个时候我还不知道这些曲子是为了什么而写，我也不知道歌词是什么意思。\n即使现在我会把一首曲子的词放到很大比重，也不影响。\n真正的音乐不需要通过歌词来讲述曲子的内容，实际上我喜欢的这些曲子里，发音、以及伴奏和人声交替出现的时间才是令人着迷的地方，这大概也是梶浦语出现的原因。\n当我开始看空之境界的时候，也是许久之后重新听到这些曲子。还是那些熟悉的旋律，熟悉到即使是今天，我也可以跟着这些曲子发音。\n因为在开始的那些时候，也是这样的。\n大概就是过了这么久的时候，才发现自己兜了一个圈子，自己中间听的这么多，结果在一开始就遇上了自己的最爱，但是只有在期年之后，才能再次认识到她的美。\n君将化作光明。\n\n傷跡\n我从寂静中迈步而出 走向未曾见过的爱情\n\n我还能多说什么呢？\n有些曲子在一开始是听不懂的，只有在经历了够多，回想起来的时候才懂。\n我相信她们分开，是被迫的而不是因为出现了裂痕。\n\nLacrimosa\n想再一次爱上这眩目的世界\n\n镇魂曲。\n如果可以重来一次，我愿意用一切作为代价。\n那个时候我不知道什么是 Bilibili，唯一看过的动漫是黑执事，Kalafina 的曲子是我听过最初听过的 JPOP。\n天空上冷酷无情的众神啊！\n\n辉く空の静寂には\n有多么爱 有多么狂 似如就像这胸膛即将要烧尽狂乱一样\n\n很抱歉，我真的很抱歉。\n想哭，但是却哭不出来。当我想写的时候，才发现自己语无伦次。\n没有人会看的吧，或者没有人会同意的吧，因为他们不理解啊。\n那个阳光明媚的、美好却又有着无尽哀伤的夏天。\n那些睡眠被梦魔偷走的夜晚。\n那时候少年还不知道，就像遇见初恋一样的，Kalafina 会如此的重新塑造了他的音乐风格，音乐审美。\n他会因为这个开始看动漫，开始把学会日语作为一个目标，开始深深地沉迷进音乐里，把演奏的爱好珍视如生命。\n他会在多年之后再次深深折服于 Kalafina 的曲子。\n这是他最爱的曲子。\n这一直是他最爱的曲子。\nKalafina 是他最爱的 Musician，不是 Singer。\nKalafina 和梶浦由纪是他未来最爱的 Musician。\n既然没有办法重来一次，那就当现在是最美好的结局吧。能够遇见 Kalafina 是最幸运的事情了，就像遇上了音乐。\n璀璨的天空，静寂中。\nAlynx Zhou\nA Musician\n"},{"title":"コラージュ（卫宫家今天的饭 ED）曲谱","url":"/posts/Emiya-Menu-ED/","content":"コラージュ TV动画 卫宫家今天的饭 ED 曲谱 扒谱 Alynx Zhou\n\n\n\n数字谱：\n1234567891011121314151617181935[1]4 6[1]4 #5[1]3 5[1]5\n35[1]4 6[1]4 #5[1]3 5[1]5\n35[1]4 6[1]4 #5[1]3 5[1]5\n35[1]4 6[1]4\n\n555432123 4321232 (66)1(7)12\n55567[1]121 123411(7)1\n\n555432123 4321232 (66)1(7)12\n55567[1]121 123411(7)1\n\n511 1511 1511 (55)21\n(76)32 265 67[1] 123431(6)122\n\n23#4 5[2#1] 77766 23#455#433#4#4\n23#45#43#1 #12365#4#2 #23#4522(7)233\n\n23#4 5[2#1] 77766 23#455#433#4#4\n23#45#43#1 #1236[#12] 23#4522#12 23#4522#12\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"CoffeeScript 的静态方法和静态变量（类方法和类变量）","url":"/posts/Coffee-Static-Varible-Method/","content":"CoffeeScript 的静态方法和静态变量其实就是 ES6 里面的静态方法和静态变量，但是本身 ES6 应该只实现了静态方法，静态变量的定义方法并不直观，同时加上 CoffeeScript 的语法就更不好得知如何实现，coffeescript.org 似乎也没有对这方面进行过多介绍。网上搜索到的办法大部分只介绍了如何创建静态变量和静态方法，但也就到此为止了，对于其应用的写法，比如如何在实例方法里操作静态变量和如何在静态方法里操作静态变量的区别并没有详细说明。这次打算把自己写 coffee-telegram-bot 时尝试出的办法记录下来。\n\n\n静态变量\n很遗憾这里没有 static 这么简单的关键字，即使是在 EMCAScript 里 static 这个关键字也只是用来修饰静态方法，用 static 修饰变量仍然是个提案。首先还是来说如何在常规的 JavaScript 里使用静态变量（只考虑 ES6 之后的情况，因为多亏了 CoffeeScript，我也没有写过 ES5），它是如此的简单而又奇怪，简单是因为即使是我这样又笨又懒的人看过一遍也能在 Node 里完整地默写出来不报错，但是这是有原因的——因为它实在是太古怪了以至于你看一眼就忘不了它：\n123456789class Test {\n  constructor() {\n    ++Test.counter;\n  }\n}\nTest.counter = 0;\nlet t = new Test();\nconsole.log(Test.counter);\n// 输出 1\n没错这段代码是如此的直观，以至于我都不需要写注释来解释每一句干了什么，我敢肯定你有任何一点面向对象的基础都能明白，如果你对任何一个部分表示不理解，我建议你仔细去学习一个面向对象的程序语言—— Java 是个好选择因为它很成熟，同时是个严格的面向对象的程序语言。\n当然，JavaScript 并不是那么纯粹的语言或者说它几乎什么都能做一点并且这个趋势越来越大，所以你并不需要深入的面向对象知识也能看懂上面那一段代码。在 ES6 中实现一个类变量或者叫静态变量就是这个简单地两步：第一在类定义的方法内直接使用类的名字来访问静态成员——你没看错，这里没有 this ——毕竟这里的 this 在上下文中大多数指的还是实例而不是类本身。第二在类定义的外部给你想要的变量进行一个初始化（赋初值）。\n我敢肯定对于 JavaScript 这样一门号称“一切能够用 JavaScript 实现的最终都会用 JavaScript 实现”的语言而言肯定不只这么一种实现类变量的方法，但是最起码对我而言这是最直观的一种，我相信对于一切有一点 JavaScript 基础的人而言这也都是最直观的一种，如果你想问为什么没有更直观的在类定义内部实现的像 Java 或者什么一样的写法，很抱歉，暂时没有，或许你可以等到 ES7 的时代再来学习 JavaScript，当然到那个时候你又会被这门语言其他的问题纠结到 ES8，这很现实，这是一个不完美但同时不断高速进化的语言，它越来越广泛的应用逼着它去填由于愚蠢的商业手段导致的停滞不前带来的坑，当然最起码——JavaScript 虽然出生仓促，但基础并不很糟，或者说它有着各种奇特的实现不断让人燃烧自己的脑细胞。\n好了是时候回到今天的主题了，我觉得我从来就不是一个合格的 JavaScript 程序员因为我喜欢 CoffeeScript——这大概是原罪，特别是在一群 TypeScript 的好战分子眼里——我没有说 TypeScript 不好，但是我只是很喜欢 CoffeeScript 的语法糖以及动态类型带来的天马行空或者乱七八糟的写法——你何必把一只泥沼里的乌龟拉去杀死放在庙里供奉呢？\nCoffeeScript 的官网虽然没有明说，但是它确实有简化这部份的语法糖：\n你只需要像写一个方法一样写一个变量，把它放在和方法一个层次上，然后要在开头加上 @，无论你使用 :  还是 = 来赋值都没有关系。在实例方法中使用时的写法有点变化，你不应该用 @ 因为它不属于当前实例这个 this，它属于 this 的 constructor 也就是说 @constructor，CoffeeScript 编译器会正确的把这个替换成类的名字——没办法，JavaScript 并没有代词指代这种情况。\n1234567class Test\n  @counter: 0\n  constructor: () -&gt;\n    ++@constructor.counter\nt = new Test()\nconsole.log(Test.counter)\n# 输出 1\n编译出来的结果是这样的，虽然有着浓浓的咖啡味道但是也不难懂：\n12345678910111213141516// Generated by CoffeeScript 2.1.1\n(function() {\n  var Test, t;\n  Test = (function() {\n    class Test {\n      constructor() {\n        ++this.constructor.counter;\n      }\n    };\n    Test.counter = 0;\n    return Test;\n  }).call(this);\n  t = new Test();\n  console.log(Test.counter);\n  // 输出 1\n}).call(this);\n实际上如果你只是想 创造 一个属于类的变量还有一种写法，但是严格来讲它并不属于类变量而是访问原型上的一个变量（不要忘了 JavaScript 的原型链），这个变量仍然会实例化，之所以在这里提起是因为网上很多搜索结果把这个也称作类变量，我认为是不正确的。\n1234567class Test\n  counter: 0\n  constructor: () -&gt;\n    ++@counter\nt = new Test()\nconsole.log(Test::counter)\n# 输出 0\n不推荐这个写法并不是因为它用了一个 C++ 常见的符号 ::，而是因为它只能让你访问到一个原型上的变量，最后仍然会被实例化，也没有直观的语法糖让你在方法里修改它（大概直接写 Test:: 可行？）。\n静态方法\n有了前面的基础静态方法无论是在原生 JavaScript 里面还是 CoffeeScript 都变得相当直观——大概只需要一个例子：\n在 CoffeeScript 中和处理静态变量很类似，都是简单地在前面加上 @，当然如果你要在静态方法里操作静态变量不需要写 @constructor 而是直接写 @，因为这个时候上下文的 this 就是这个类本身——严格来说这也是不对的，能够绑定到这个上下文的原因是 CoffeeScript 编译的时候增加的函数作用域——这是个好东西，咖啡味。换句话说 ES6 这里根本就没有和 this 扯上关系，它只能傻乎乎的用类本名，CoffeeScript 在这里自己多搞了一点，用这个来变通，翻译成 JavaScript 的时候再替换掉文本。\n123456789class Test\n  @counter: 0\n  @printCounter: () =&gt;\n    console.log(@counter)\n  constructor: () -&gt;\n    ++@constructor.counter\nt = new Test()\nTest.printCounter()\n# 输出 1\n编译成 JavaScript 之后是这样的，static 关键字终于出来刷存在感了：\n12345678910111213141516171819// Generated by CoffeeScript 2.1.1\n(function() {\n  var Test, t;\n  Test = (function() {\n    class Test {\n      static printCounter() {\n        return console.log(Test.counter);\n      }\n      constructor() {\n        ++this.constructor.counter;\n      }\n    };\n    Test.counter = 0;\n    return Test;\n  }).call(this);\n  t = new Test();\n  Test.printCounter();\n  // 输出 1\n}).call(this);\n总结\n事实上到上面已经靠几个例子说明了正确的用法，但是由于还有交叉处理的部分，简单总结一下。\n1.把变量写在类定义里面属性的层次并且在变量名前面加上 @ 会在 CoffeeScript 里产生一个静态变量。\n2.在方法名前面加 @ 会在 CoffeeScript 里产生一个静态方法。\n3.在静态方法中操作静态变量只需要像在实例方法中操作实例变量一样使用 this，这个作用域就是类定义的上下文，CoffeeScript 自动把 @ 替换成类的名字以便符合 ES6 语法。\n4.在实例方法中操作静态变量需要使用 @constructor，原因是这个时候的 this 是实例本身而不是类，类在 CoffeeScript 里绑定到了 this.constructor，编译时自动替换成类的名字（因为 ES6 只能这样访问类变量而不是用一个引用）。\n5.在静态方法中操作实例变量……根本没有这样的用法好吧！！！\n碎碎念\n明明是凑数的文章却偏偏写了这么多，反正大概是没有人看的，毕竟 CoffeeScript 是要凉了，就像那些激进分子希望的一样，光是喜欢又有什么用呢？他们是不会管你喜欢不喜欢的，他们不喜欢就得了。短期内倒是希望 Atom 能搞点什么大新闻，可以不要让 VSCode 激进分子在我这边黑 Atom，我就是喜欢用 Atom 不喜欢用 VSCode，就算你觉得 Atom 有很多缺点可是我觉得它足够合适乃至我可以接受它的缺点，在我这边吵除了生气以外还能有什么作用不成？所以我讨厌辩论，光是说，却没什么实际作用。或者这大概是软粉和微软受害者的冲突而已？最近没得东西写出来，还是去推一推 Fate/Stay Night 或者打一打 CSGO 好了。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"StackHarbor 的 2017 尾记","url":"/posts/2017-Tail/","content":"\n回到住处，掀出电脑，拉开在超市买的一听可口可乐的拉环，还有一个半小时，现在该写2017年的年终总结了。时间刚刚好。\n\n\n一直拖一直拖，拖到最后却发现把想说的都丢在了路上。\n想起来才发现好久以来都是“你也牵过手，是左手牵右手”，无所谓，没人看的。\n今晚月色真美，你的学校也是，虽然从北京来到南京也没能逃过雾霾，河北省可以不背锅了这次。\n喝可口可乐也会醉吗？\n有好多事情没有做呢，明年再说吧。我又不是个精力充沛的人。\n其实很想做一个深情又优雅的人啊，可以唱深情的歌，但是总是做不到的吧，提速提的再快也只能发现优雅的人他的高贵大概是天生的，再努力的结果也只是让你更清楚的认识到这中间的差距不是靠努力就能实现的。\n我曾经如此觊觎日月的光辉。\n我曾经如此渴望爱情的甜美。\n我曾经如此在乎他人的感受。\n我曾经如此高估自己的才华。\n能怎么样呢，有时候样子是装给别人看的，还有时候样子是装给自己看的，要么改变样子成为自己想要的，要么坦然接受自己现在的样子，做到任何一个是勇气，做不到任何一个，只能是自己给自己笑话好了。\n爱一个人是那么容易的事情么？\n也许对于18岁的自己来说是的吧，但是毕竟没有人永远18岁啊。\n以前就想不明白，想恋爱怎么也会是负担。但是想多了就不敢了啊。\n做选择为什么这么难呢。\n世界说这世界并不像你想像的那么友好。\n世界说它总是对你带有敌意。\n世界说你所珍视的最后总是只对你自己有意义。\n世界说每个人都会投入生活的洪流，最后被生活碾碎。\n世界说生命不断进化，但是世界永远循环往复。\n世界说我爱你因为你就是世界。\n生命如此漫长，漫长到我们不得不寻找一些事情，给他们附加上别的意义。人类就是这样一种脆弱而又倔强的物种啊，我们提出了自己是谁的终极问题，然后发现这个问题并不能推导，我们必须通过实践，认识不同的人，建立重要的关系，给事物附上属于自己的意义。生命是漫长的，但它的漫长不过是让我们有机会做完所有自己要做的事情，才能更好的认清我们自己。\n哪怕前面五个悍匪端起P90 Rush B，也要握紧手里的M4A1-S。早就过了可笑的追逐最强的年龄，到现在才无可救药的开始喜欢超电磁炮，即使她不是最强，即使在剧情里出现了越来越多更强的人，可是我还是喜欢她啊。\n一个好故事比什么都值钱，一个会讲故事的人也是。对于StackHarbor而言，又增加了一年呢，又要开始讲述新的故事。\n请原谅我这个不熟练的讲述者吧，因为我爱这世界。我不仅爱它的每一次相聚，也爱每一次分离，我不但歌颂每一个新生命的诞生，我也歌颂每一个生命的离去。即使知道前面是洪流，我也要追逐爱情。\n2018，新的一年，请多指教，当然，请不要忘记先看最新版的About Me。\n我爱你，因为你就是世界。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"忧从中来，不可断绝","url":"/posts/Song-And-Sadness/","content":"\n那个弹吉他的人在我的隔壁。\n\n\n老实说他弹的很一般，但却让在琴房待了一下午一晚上的我决定多待一会。开始他只是练音阶和唱音高，但是后来他唱了几首歌，有董小姐，有不再见，还有我没听过的。\n虽然中间不是很连贯，有的地方还要重来，而且还隔着琴房的隔音墙。但是在这个普通的周六晚上却让我有了想哭的冲动。\n也许歌者无意但听者有心。当一首歌被写出来的时候，它纪录的不过是创作者的故事，但是当它被人听到的时候，就不再是只属于作者的了。喜欢听歌不过是因为想从其中听到自己的故事。\n有些歌曲听过了才会明白。有些故事经历过了才会懂。\n在这个特殊的日子里听到一段段歌声。\n他不需要知道我为什么哭泣。\n不如永远不见。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"冬天来了","url":"/posts/Winter-is-Coming/","content":"生活好像脱缰的野马，你我都不是熟练的骑师。\n\n\n昨天在外面冻了一天，今天又搞了乱七八糟的代码，所以就头疼了一天。\n每天还是睡不醒的样子，12点睡7点起，真想找个时间好好睡他十二个小时。\n昨天从东区招新回来睡了两个小时又起来去写网站到晚上十一点，今天起来上课就听说有的社团招完新第一次例会都开过的，想想我连短信都没有发，强忍着头痛拉完了群，又开始想在哪里组织活动。人一多就很难找到共同的时间，也许是我本来就不适合做这些事情，回头看仅有的四个活动室又都被选了好时间，看来都是用的脚本，又得给自己加需求了。\n没什么比一次热水澡更治愈了。\n还有一周时间要看大物和模电，又头疼。\n总有乱七八糟的无聊事情。我的bot还没加功能呢。\n如果人也有发情期，我觉得是在冬天。\n不知道为什么寒冷的气温反而能激发人恋爱的欲望，比起暴露的夏天，在这个温度里互相拥抱更加舒适，即使彼此都穿的臃肿。\n这才是恋爱和失恋的季节。每到这个温度孤独就违背自然规律从坚冰融化成海浪，后一阵总来的比前一阵猛烈。\nWelcome to the StackHarbor, sir/madam, a unreal harbor which belongs to the void sea, here's your hot milk, hope the wave sound and cold rain won't distrub your dream, good night.\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"我生气了！！！","url":"/posts/I-Am-Angry/","content":"\nI AM ANGRY!!!\n\n这里多了一只发怒的猹喵。愤怒能抑制懒惰。\n\n\n我发现可能是我的C++老师有着过于清奇的脑回路，几条没头没脑的作业评语毁了人的好心情。\n算了，不值得。\n你本来就没什么好心情。\n既然见面了，人们往往还是要从天气谈起。\n很抱歉这里没什么好天气，先是雾霾又是下雨，霾里藏雨真是可怕。\n生活总是在极端之间摇摆，中音谱号露脸的机会总是最少的，又好比剪指甲，太长了刮键盘恶心，太短了又会按的手指疼。\n我刚刚剪的有点短。\n希望什么的总是 不存在的，一件事情并不会因为在脑海里排练多次就会完美发生。\n也有可能连发生这件事情的机会都消失了。\n没有脑子，僵尸是什么时候干掉小推车的？\n再次体会到没有分析清楚就做事情的痛苦（由于冲动选择更新StackHarbor，这一条痛苦*2）。\n反正烦恼会解决烦恼，新的刚来到，旧的就忘掉。\n有时候听懂一首歌真的是不开心的事情，你仔细一听，这歌词说的，哦不对骂的，不就是我吗？\n为爱情折腰确实是一直以来戒不掉的癖好。\n你那也配叫爱情。\n你那也配叫编程。\n你那也配叫音乐。\n你那也配叫文学。\n真嫉妒啊。\n说好听点活着就是要不断突破自己，说不好听就是你做了这么多最后还是觉得一事无成，你还是看着那些早就自我实现的人，一边安慰性的嫌弃他们，一边羡慕的等着自己的运气。\n想来想去，想了好多，最后决定什么也不做，这算是逃避吗？\n你可真是唯心主义啊。\n谁管他别人怎么说，反正自己认为自己漂亮地struggle。\n嘴上说着不相信命运，心里比谁都希望一切顺利，一切顺利不就是不需要自己努力的代名词。\n所谓的赏析有点多余，不就是心里想着“哎呀这个太好了一下就把我心里想的没想的都说清楚了长的都是一样的嘴可是我怎么就说不出这样的话呢”。\n愤怒过后也有空窗期。\n该睡觉了，晚安，我跟自己说。\n明天又是早八点到晚六点不停转。\n美好的一周又要从一节C++开始了。\n还是相信命运吧，毕竟除了明天我们一无所有。\n期待明天不是因为信心漫漫，也可能是因为别无选择。\n开始时捱一些苦，栽种绝处的花。\n幸得艰辛的引路甜蜜不致太寡。\n你说，这开始的苦怎么就这么长呢。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"Be Brave","url":"/posts/Be-Brave/","content":"It's really hard for me to type something in this post, all I want but can't express is fearness.\n\n\n\n\n\n\nDon't know how to express, I think if to express is a kind of ability, I must lose this for a long time.\nAll I am trying to do is just like a man who cannot swim but trying his best in water, you cannot say he did nothing to help himself, but in fact his work did nothing.\nI am really afraid of losing control of everything I can reach, I want everything go as my thought, even a little difference can drive me crazy.\nI have no time can express except the darkest night, everyone lives in everyday works so hard, I cannot give them a sad face.\nI give it to myself. I am trying to be the most perfect and attractive to other people. I know I always fail.\nI know I did things wrongly, but I need chance to redo.\nChances are expensive, but only you get chances can you make changes.\nAll things go like this must have reasons.\nSometimes I find myself boring.\nI did lots of things to find other interests to support life.\nI listen to music, but I find I got crazy and press next in 30 seconds for a song. I cannot keep listening to even one song, I just feel tired.\nI read books, sometimes I can read them quickly, but most I cannot read even one page.\nI cannot write even one line of code.\nI play games from day to day, but not so happy.\nI want to stay alone while I want someone can stay with me.\nI nearly get the one, I nearly lose the one, I don't want to lose the one, I must regain the one.\nBut how can I get a chance?\nWill there be a person from the future telling me that the result?\nI know no one can lives in his fifteen forever.\nI used to think little about the far future.\nNow I still think little, but a little bit further.\nTotally out of my control, the future.\nGirl inside.\nMaybe I can only write such boring things now.\nSorry.\nBe brave, just two simple words, but how can I keep brave while facing uncertainty?\nI still trying to make me seems perfect.\nI know only in this way can I regain chance.\nJust for a chance.\nLeave tears and fearness to myself, I won't let others see.\nBut who can wipe my tears when I wake from dream in midnight?\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"Dirty Words","url":"/posts/Dirty-Words/","content":"I'm so honor that I can speak another language when they ask me to shut up with their language.\n\nThere are some ways to fight against with them, but only when you have enough power, sadly.\nI feel so lucky, though I cannot speak English so good, but if you are with me, I believe you can feel what I wanna say.\n\n\nAnd it seems that they do not care about English essay.\nI don't know how to say in normal words, oh yes they won't let you say.\nWhat could let a man give up his native language speaking something?\nThere is examine everywhere, and what's more horrible, the people in this \"wonderful\" land developed a kind of \"self-examine\".\nBecause abnormal things happen every day.\nInside their border. some words even some people can disappear suddenly, just because they are something different from the main idea. Even the minority is correct.\nOut of the border, they cannot simply remove it, but they block their people from watching.\nI were able not to speak those, because I am a poor programing monkey(or cat)? I am so tiny so weak. The old saying goes that \"Being quiet will save your life\". I should just write my code and live my poor life.\nBut I can't.\nFirstly they blocked words negative to them, I said nothing, because I don't believe those words, partly they taught everyone those are fake.\nSecondly they blocked colorful hairs on TV, I said nothing, because I don't like colorful head.\nThirdly they said gay and lesbian are abnormal, I said nothing, because I am not one of them.\nBut finally when you want to say some words, they just disappear, like you never live.\nThat's interesting? You and many people before you developed tools, you wanna to build a dream world, you believe that every one in the world shoud be friendly, because we are all mankind, we should love each other and be brothers or sisters, aren't we?\nAnd what do you think when you see devil destroyed your world?\nConstructors are great, who can only make problems to others is shit.\nThat's when self-examine come into existance.\nWhat a strong life a man is!\nEven your mouth loses your voice, you eyes lose your vision, you ears can hear nothing but \"positive energy.\"\nIf the so-called positive energy is everywhere, where could negative energy be? Your heart? My heart?\nRemove the speaking function of your mouth and leave eating here, isn't it good?\nBut we are not born like these!\nThere are days we say everything we want on the Internet, but you see, a post with hundreds of thousands of reposts were removed, you find you are so tiny.\nTogether we stand but then get killed?\nOr most of the people have a hard mind and a soft heart? Just some cheap words can let people believe a bad man is for their peace.\nSorry I never eat chicken soup.\nIf you did something with a totally wrong direction and think your practice can let others respect you, you are a totally dog shit. If you asked a group of people doing wrong thing for you, you are totally a son of the bitch.\nIf not, what should we do for the people in the correct direction?\nDon't disturb me with these silly things you made. Do what you should do.\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"你的名字。","url":"/posts/Your-Name/","content":"老实说我也许是个对电影没什么品味的人，但是在看了这个之后总觉得要写点什么。\n不过参考现在的时间和我黑暗中可怜的盲打能力（最后想起来我的LED灯），这篇文章不会很长。\n\n\n某种意义上来讲，虽然我是属于认为“生活就是应该有情调”的那种人，但是我的生活却一直没什么情调。最好的例子就是在看电影上，我是个几乎没去过几次电影院的人，但是看完《你的名字。》之后，我最后悔的是当时没能和你一起去电影院看，当然考虑到时间和空间确实是没有可能性，所以改成寒假一起看了《爱乐之城》。\n没忍住在pt上找到了片源挂下来，然后一直看到深夜，这也是少有的让我看一遍就感触颇深的剧情。\n上一次听到这样的曲子是什么时候来呢？大概是未闻花名的片头，略带慵懒的男声，给人的感觉像是和煦的阳光照在身上。不同的是这一次我想流泪。\n前一小时欢乐而又离奇的叙事，和后四十分钟虽然长，但是却能让人一直保持紧张的高潮。\n看了整部电影，有情感共鸣的是三叶第一次看到东京的时候。\n没错我想说这和我一年前的感受是一样的。\n仿佛走进了Minecraft的巨大化地图，当然还有并行的轨道列车，以及复杂的道路。\n能把生活中最有特色的部分提取出来才是真正的艺术。\n当然，还有泷与三叶第一次在电车上见面，以及两人在错过之后的转身而遇。\n有人说是故弄玄虚，但我以为这是绝妙之处。\n有一些文化是只有东方人才能理解的，东方文化的含蓄，对宿命和缘分的看中。\n三叶站在泷的面前却因为第一句话受阻而脸红不敢开口。\n似乎一切都没有改变，却又遇见了系守的那对情侣，抬头只看见无法确认的背影。\n在电车上偶然看见，仿佛突然想起一切般寻找，明明就在对面，眼泪溢满眼眶又不敢确认而错过。\n最后仍旧是羁绊而回头。\n“从你的前前前世开始，我便一直在寻找着你的踪迹。”\n\n即使我不记得你的名字，那就让我再大声的问你一次吧。”\n灯灭了呢。\n不知不觉，已经过了一个月，很长？很短？我是给自己定了永远的时间线呢。\n今晚月色真好。\n晚安。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"突然更新","url":"/posts/An-Update/","content":"谨以这篇没营养的更新表明我现在闲着。\n\n嘛，好久不见，我还是那只猹喵Alynx，本着我一向诚实的原则，丑话说在前头，这篇间隔许久的更新注定是没营养的，如果你珍惜你的流量的话——\nWindows用户/大部分Linux用户请按右上角X，macOS用户/Ubuntu用户/自己偏要把关闭按钮挪到左面的用户请按左上角X，Android/iOS用户请按home键并把您的浏览器从多任务界面除去。Windows Phone用户（如果有的话）请把手机摔掉，并感谢我（而不是微软爸爸）给了你一个冠冕堂皇换Android/iOS设备的理由。\n如果您还没有坚定您的决心，实验七写完了吗？实验七50页的坑爹说明都看懂啦？没看懂还不赶紧把你打印出来的实验七说明撕了，回去高中找你的语文老师承认没好好学习语文的错误！\n顺便补充一句把这种垃圾实验说明打印出来本身就是对树木的不尊重了，你看我知道我写的东西很垃圾，所以我从来不打印纸质版，都是放在网站上做电子版。\n\n\n如果你成功越过了上面的重重挑战，很好，和我一起打开Steam，来一盘紧张刺激的CS:GO/Dota2，今天的更新到此结束，谢谢大家。让我们往下继续。\n今天是（日期自己看发布日期！）多云转晴，空气还是凉爽的，难得的好天气，虽然走在外面还是会出点汗。\n杯子里的冰咖啡在冰块化开之后稀释成了红茶般的颜色。\n“下面插播一条新闻，您正在阅读的这篇文章由于 1. 写作者播放器播放的音乐不对 2. 写作者困了想睡觉了 3. 写作者的输入法罢工了 而推迟更新日期到无限期。”\n（搞什么啊！现在的新闻都这么没劲了啊！骗鬼呢！）\n可是也许我想说的本来就没什么想说的，或者说我能在这里写出来点什么东西真的该感谢从小学到高中的语文老师们，我知道我不是个什么有文学天赋的学生，如果有，也被我放到代码里面了。\n说正经的，从上一次更新到这次更新的漫长时间里我都做了什么呢？（观众：我们对你吃了啥喝了啥和机友搞了啥没兴趣！骗人呢这不是！我：说实话我对我吃了啥也没兴趣，毕竟东区食堂就剰那么两样能吃的了。）\n上个可怜的三天假期花了两天时间从pt上拖下了高清的EVA，占据了我相当可观的一块硬盘空间，然后把这个套着热血OP实际是导演作死的意识流神作看完了。TV + 旧剧场版（最后那个大白丽求导演别吓宝宝了行不） + 三部新剧场版。\n“福音战士新剧场版:||，现已与 科学超电磁炮3/科学超电磁炮剧场版 一起加入您的有生之年套餐！”\n具体内容不评价了，毕竟EVA的分析已经有好多了，我自觉没有那个水平，你说我的感受？上面那句还不够吗？\n这个可怜的假期则是昨天半夜看了下载好的攻壳机动队2017，又把可怜的宝宝吓得不轻（别嫌弃喵确实比看上去要胆子小，求抱抱）。好在看完这个没有让我产生补番的冲动。\n（难道你这么多天不更新除了看番看电影就没干别的嘛！！！）\n当然有啊，写那个该死的实验七嘛，虽然没写完呢还（懒）。\n还有准备口琴社团的建立啊，终于开始步上正轨了，建成的时候还需要人捧场呢。\n还有直播啊，初生牛犊不怕虎的在B站录C语言入门教程，具体的原因嘛，嘿嘿嘿嘿嘿不告诉你们。\n想看的点击这里也许能访问到我的Bilibili主页。\n（所以你今天写这个更新到底是要干啥啊！）\n不干啥啊，表示我现在（仅仅是现在）很闲（其实就是心里想偷懒）啊。\n如果真的想看严肃的/文学性的/技术流的/音乐向的，放心，接下来我会督促自己往下写的，不会这么长时间断更了。\n哦对，快要高考了是吧。送给学弟学妹们一句话，考试放松点，报志愿谨慎点。\n毕竟你要考试紧张了没发挥好，报志愿再不上心，今年8月份你可能就在北交大军训咯（笑哭），虽然17届在学校军训不用去怀柔也没有散训（怨念啊！），可是你们还有月考啊！还有除了计算机与信息技术什么都学就是不学计算机与信息技术的计算机与信息技术学院啊（仅限大一大类招生）！还有我们假期少啊！\n玩笑归玩笑，该考虑的还是要好好考虑的，毕竟你活着不应该是只为了学习或者工作，相反，工作和学习是为了更好的生活。\n可是我已经考完了啊，我还纠结什么呢？\n那么今天这个没营养的更新就这样结束了，饥饿的猹喵要去觅食并准备今晚的直播了。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"灰色情人节","url":"/posts/Grey-Valentine-s-Day/","content":"感冒 + 鼻炎 = 浪费纸张，另外也许大脑缺氧会导致胡思乱想，很疲惫又无法入睡。\n\n\n终于回到了温暖的季节，天气好的让人觉得继续躲在屋子里面就是浪费了大好时光。\n可是自己一个人走在温暖的阳光下却感觉像是暴露在射线下一样难以忍受。\n所有的人离预期似乎都有差距，接近预期的却又很难制造交集。\n比起跨越千里的车票，直达对方内心的车票更加贵重些吧。\n灰色的情人节，把黑色的爱给白色的你。\nAlynx Zhou\nA Coder &amp; Dreamer\n"},{"title":"使用 GDB 进行简单的 C 语言程序调试","url":"/posts/Using-Gdb/","content":"事实证明有时候无聊的东西反而变成了一篇博文，谁叫恶趣味的C语言作业非要求用word写实验报告，本猹宁可先写成Markdown再复制粘贴过去。\n\n\n首先按照惯例应该介绍下GDB，搭配GCC使用的调试器，也是众多使用GCC为编译器的IDE的默认调试器（大概？），虽然无聊的实验报告模板还很搞笑的写了一个部分叫XXX调试器和VC6.0的比较（看戏的内心：我看过两年学生出生时间比VC6还晚的时候这些课还怎么拿VC6讲）。\n所以掌握GDB的使用还是很有必要的，毕竟掌握某个使用GDB的IDE终究只是掌握了一个图形壳子，原理估计还是要深入一层到直接用GDB（强行接入正经模式）。\n这里只是按照实验报告的要求写一下断点调试和单步执行的用法（PS：Word实在是太难用了，字号缩进和标题序号就没有按照我想要的方式工作过。\n\n准备\n调试模式编译程序\n首先应该明确调试的实现方式，GDB能够暂时的停下程序操作程序其实是通过向编译过程中的二进制流中添加钩子（HOOKS）来实现的。但是对于一个正常的，打算释出给用户使用的程序而言不应该以调试模式编译，因为这些添加进去的钩子不但会增大文件体积，还会降低程序的运行效率。所以GCC默认编译程序的时候时不会添加这个钩子的，需要的时候以-g参数来启用调试模式。\n本例中以文件Lab2.c为例，使用命令\n1$ gcc -std=c11 -g -o lab Lab2.c\n将它编译到可执行文件lab。\n用GDB打开程序。\n打开程序的命令很简单，就是$ gdb lab，但是有可能遇到的问题是程序要处理命令行参数，在使用GDB的时候是不能直接在命令行后面附加程序参数的，需要使用参数可以在打开GDB之后输入set args 参数1 参数2 ...附加上参数。\n用GDB打开程序之后是一个交互界面，显示了一些信息和(gdb)这个提示符，表示你现在是在和GDB进行交互而不是程序。这个时候程序是不会运行的。\n12345678910111213141516GNU gdb (GDB) 7.12.1\nCopyright (C) 2017 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-pc-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n&lt;http://www.gnu.org/software/gdb/bugs/&gt;.\nFind the GDB manual and other documentation resources online at:\n&lt;http://www.gnu.org/software/gdb/documentation/&gt;.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from lab...done.\n(gdb)\n调试\n设置断点\n首先使用break指令就可以添加一个断点，断点顾名思义就是程序运行到这个位置会暂停下来交给GDB，这样你才能够在程序运行到一半的时候查看一些可疑的变量，断点是针对函数使用的，比如我想在所有的printf()进入的时候暂停，可以使用：\n1(gdb) break printf\n显示的是这样的：\n12(gdb) break printf\nBreakpoint 1 at 0x400540\n当然接下来可以继续添加更多的断点。\n然后使用run就可以让程序跑起来：\n123456789101112131415161718(gdb) run\nStarting program: /home/alynx/Homework/实验材料（学生版）/实验2/lab\n[实验2说明]本练习运行一个三重for循环, 循环结构如下:\nint count = 0;\nfor(int i=0; j&lt;LoopEnd1; i++)\n{\n    //第一重循环体\n    for(int j=0; j&lt;LoopEnd2; j++)\n    {\n        //第二重循环体\n        for(int s=0; s&lt;LoopEnd3; s++)\n        {\n            count++;//第三重循环体\n        }\n    }\n}\n\nBreakpoint 1, 0x00007ffff7a86e00 in printf () from /usr/lib/libc.so.6\n这时候使用print指令可以打印任意的内容：\n12(gdb) print printf\n$1 = {&lt;text variable, no debug info&gt;} 0x7ffff7a86e00 &lt;printf&gt;\n使用bt指令可以显示出程序的栈（Backtrace）：\n123(gdb) bt\n#0  0x00007ffff7a86e00 in printf () from /usr/lib/libc.so.6\n#1  0x0000000000400745 in main (argc=1, argv=0x7fffffffe078) at Lab2.c:26\n输入c就是继续运行程序的意思。但是step指令的功能更加有用，顾名思义这个就是单步运行，每次只运行一行代码，这是个step-in的模式，即如果该行有函数则进入函数内一行一行运行，而next则是step-over的模式，即如果该行有函数会运行函数返回结果而不是进入函数内部。\n12345(gdb) step\nSingle stepping until exit from function printf,\nwhich has no line number information.\nmain (argc=1, argv=0x7fffffffe078) at Lab2.c:27\n27        scanf(\"%d\", &amp;LoopEnd1);\n如果不输入指令直接回车，就是重复上一条指令，程序运行结束之后可以使用quit指令退出GDB。\n\n好了本猹要去补作业了。\nAlynx Zhou\nA Coder &amp; Dreamer\n"}]}